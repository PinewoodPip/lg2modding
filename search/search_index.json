{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lazy Galaxy 2 Modding Docs Introduction This site serves as a guide and reference to creating custom content for Lazy Galaxy 2. At the time of writing, mods can add new campaigns, upgrades, ships, ship abilities, food items, recipes and Ascension trees. You can load multiple mods at once, however enabling a mod on a savefile is a one-way trip; once enabled, the savefile will not load without the mod being installed. You will be notified of this when you try to load a savefile with new mods enabled, and a backup of the save will be created in case you need to revert. When creating mods, you should use separate saves for testing (or a copy of your normal one) in case things go wrong. Setup The easiest way to create a mod is through the campaign editor option in the mods menu (accessed from the main menu): Even if you don't intend to create a custom campaign, the menu is useful as it will create a mod project folder with all the metadata already written, so you do not need to set it all up manually. Make sure to make the ID field as unique as possible (including your name as a prefix/suffix helps a lot) to avoid conflicts with other mods as this will be used to identify your mod's stuff in savefiles. As such, it should not be changed, ever. Once you press create, a folder will be created in your savefile folder ( \\AppData\\LocalLow\\ColdwildGames\\Lazy Galaxy 2\\Mods\\ on Windows) and you'll be ready to start creating content. If you chose to create a campaign, you will be brought into the campaign editor. File format Campaigns are binary files, editable through the in-game campaign editor. All other custom content is defined through .json files, the properties and structure of each being explained in the various sections of these docs. JSON is a simple, easy to write and easy to read format inspired by JavaScript objects. You can quickly read up on its syntax here . All modded content must have a string ID, used to refer to the content in savefiles and other assets of your mod. These IDs should be unique across all content in your mod, and internally are automatically prefixed with your mod's ID to avoid conflicts, meaning it is redundant for you to prefix/suffix them yourself. It is never safe (for existing savefiles) to remove content from a mod, or change IDs of things. If you wish to remove something, you should hide/make it unavailable instead, otherwise you risk making current saves that use your mod unusable. The sections for each type of modded item mention how to do so (if possible). Changing any other property is fine unless otherwise specified. Unless otherwise specified, properties in the .json files default to 0 / false / \"\" (empty string) depending on the type. Folder structure A mod contains the following folders and files: meta.json : contains mod metadata, like the mod's name, your author name, and version (used for parsing old mods in case of format changes in future game updates) icon.png : the icon for the mod; will be shown on the workshop website as the banner for the mod. Must be under 1MB. Abilities : contains files defining ship abilities. Campaigns : contains campaign files; these are binary, they can only be edited in-game. Can also contain an Ascension tree for each campaign. Food : contains food items. Language : contains .xml files with custom text strings for use in other files (ex. ship and upgrade names/descriptions) Recipes : contains cooking recipes. Ships : contains ships. Sprites : contains sprites, as .png s. Upgrades : contains upgrades. Boosts : contains boosts, which define the effects of upgrades and food items. You needn't to include assets of all types, however some require the use of others. Ships require Abilities, while Food and Upgrades require Boosts. Head over to one of the sections on the sidebar to get started! It's recommended to take a look at the example mod as reference.","title":"Home"},{"location":"#lazy-galaxy-2-modding-docs","text":"","title":"Lazy Galaxy 2 Modding Docs"},{"location":"#introduction","text":"This site serves as a guide and reference to creating custom content for Lazy Galaxy 2. At the time of writing, mods can add new campaigns, upgrades, ships, ship abilities, food items, recipes and Ascension trees. You can load multiple mods at once, however enabling a mod on a savefile is a one-way trip; once enabled, the savefile will not load without the mod being installed. You will be notified of this when you try to load a savefile with new mods enabled, and a backup of the save will be created in case you need to revert. When creating mods, you should use separate saves for testing (or a copy of your normal one) in case things go wrong.","title":"Introduction"},{"location":"#setup","text":"The easiest way to create a mod is through the campaign editor option in the mods menu (accessed from the main menu): Even if you don't intend to create a custom campaign, the menu is useful as it will create a mod project folder with all the metadata already written, so you do not need to set it all up manually. Make sure to make the ID field as unique as possible (including your name as a prefix/suffix helps a lot) to avoid conflicts with other mods as this will be used to identify your mod's stuff in savefiles. As such, it should not be changed, ever. Once you press create, a folder will be created in your savefile folder ( \\AppData\\LocalLow\\ColdwildGames\\Lazy Galaxy 2\\Mods\\ on Windows) and you'll be ready to start creating content. If you chose to create a campaign, you will be brought into the campaign editor.","title":"Setup"},{"location":"#file-format","text":"Campaigns are binary files, editable through the in-game campaign editor. All other custom content is defined through .json files, the properties and structure of each being explained in the various sections of these docs. JSON is a simple, easy to write and easy to read format inspired by JavaScript objects. You can quickly read up on its syntax here . All modded content must have a string ID, used to refer to the content in savefiles and other assets of your mod. These IDs should be unique across all content in your mod, and internally are automatically prefixed with your mod's ID to avoid conflicts, meaning it is redundant for you to prefix/suffix them yourself. It is never safe (for existing savefiles) to remove content from a mod, or change IDs of things. If you wish to remove something, you should hide/make it unavailable instead, otherwise you risk making current saves that use your mod unusable. The sections for each type of modded item mention how to do so (if possible). Changing any other property is fine unless otherwise specified. Unless otherwise specified, properties in the .json files default to 0 / false / \"\" (empty string) depending on the type.","title":"File format"},{"location":"#folder-structure","text":"A mod contains the following folders and files: meta.json : contains mod metadata, like the mod's name, your author name, and version (used for parsing old mods in case of format changes in future game updates) icon.png : the icon for the mod; will be shown on the workshop website as the banner for the mod. Must be under 1MB. Abilities : contains files defining ship abilities. Campaigns : contains campaign files; these are binary, they can only be edited in-game. Can also contain an Ascension tree for each campaign. Food : contains food items. Language : contains .xml files with custom text strings for use in other files (ex. ship and upgrade names/descriptions) Recipes : contains cooking recipes. Ships : contains ships. Sprites : contains sprites, as .png s. Upgrades : contains upgrades. Boosts : contains boosts, which define the effects of upgrades and food items. You needn't to include assets of all types, however some require the use of others. Ships require Abilities, while Food and Upgrades require Boosts. Head over to one of the sections on the sidebar to get started! It's recommended to take a look at the example mod as reference.","title":"Folder structure"},{"location":"abilities/","text":"Abilities Abilities refer both to the active abilities of ships, as well as their automatic weapons. They are defined in the Abilities folder. Aside from the mandatory stringId field, abilities must also define an archetype . The archetype defines the behaviour of the ability, each of them having additional properties specific to them. The words \"user ship\" and \"caster\" here refer to the ship using the ability. Common properties These properties can be set on any ability. icon : string, the sprite filename for the ability icon. abilityNameTranslationKey : string, the text key for the ability's name. Shown when you hover over a ship in the fleet menu that has this ability as an active. abilityDescriptionTranslationKey string, the text key for the ability's description. Shown when you hover over a ship in the fleet menu that has this ability as an active. Supports parameters, see the text docs . target : number, determines who this ability is aimed at. -1 : None; the projectile will be fired straight towards where the ship is pointing. 0 : Enemies of the caster (the ability's user) 1 : Allies of the caster 2 : Same as -1, but allows the projectile to hit the ship that created it, as well as allies (useful for healing abilities) charges : number, the maximum amount of charges the ability can store. An ability can be used so long as it has charges remaining. Defaults to 1 . cooldown : number, the time between the ability's charges being restored. Defaults to 0.2 . firingDelay : number, a minimum delay between charges of the ability being usable. onlyReloadAtNoCharges : boolean. If false , 1 charge of the ability will be replenished every cooldown seconds. If true , all charges will be replenished after cooldown seconds once charges reach 0. Use true to create weapons that reload their whole clip at once. Defaults to true . canBeAutoFired : boolean, determines if the ship can use this ability automatically. Use false for active abilities. manuallyAimed : boolean, determines if the ability should be aimed with the player's cursor. duration : number, the duration of the ability. If >0, the ability is considered a durative ability; by default, no other abilities can be used alongside a durative ability until its duration ends. ignoreShipBusyState : boolean, if true, the ability will be usable even while the ship is using a durative ability. hitAllies : boolean, if true, the ability will be able to hit allies of the caster. hitSelf : boolean, if true, the ability will be able to hit the caster. setAimingCursor : boolean, if true, the cursor will be set to a crosshair when using the ability, if it is a durative one. useSound : number, the sound to play when the ability is used. See sounds enumeration . statusesApplied : list of status effects to apply to the target, with the following structure: \"statusesApplied\": [ { \"id\": 1, \"duration\": 5 } ], Where id is the ID of the status effect, and duration is the duration in seconds. Available status effects are: 0 : \"Guardian Angel\"; multiplies damage taken by 0.6 , and redirects that portion to the ship that applied the status as unresistable damage. Used by the Tortoise. 1 : Disarm; prevents the ship from using any abilities. 2 : Shielded; multiplies damage taken by 0.25 . 3 : Reflect; causes most projectiles that were to hit the ship to be reflected back to their caster. Reflected projectiles are always homing. Archetypes The archetype field of an ability defines its behaviour. The available archetypes are the following: projectile Projectile abilities create projectiles that move across the screen, and land hits upon colliding with a valid target. Multiple other archetypes are based on it, inheriting its properties: dmgMultiplier : number, the multiplier for the ability's damage. Ex. 1.5 will deal 150% of the ship's damage. damageType : number, the type of damage the ability deals. See damage type enumeration . homingByDefault : boolean, if true, the projectile will home into its target, unless it missed*. Defaults to true . travelSpeed : number, the speed of the projectile. Default is 100 . unmissable : boolean, if true, the ability will not miss if it's also set to be homing. projectileRendererScale : number, a multiplier for the scale of the projectile. Defaults to 1 . piercing : boolean, if true, the projectile will not be deleted upon landing a hit and will instead turn into a non-homing projectile (if it was homing) and continue travelling in a straight line, possibly hitting additional targets. hitCooldown : number, the duration (in seconds) that must pass before a ship can be hit again by the same projectile. Used for piercing projectiles. Defaults to 0.2 . lifetime : number, the duration (in seconds) that this projectile can exist for before disappearing. Defaults to 10 . explodeAtCursor : boolean, if true, the projectile will pass through any targets and only explode at the position the cursor was on when it was cast. Only intended to be used for active player abilities. firingAngle : number, offsets the aiming direction of the projectile, in degrees. Normally projectiles are fired towards their target; this property lets you add a degree offset. impactSound : number, the sound the projectile will make upon landing a hit. See sounds enumeration . projectileSpriteOverride : string, the sprite filename for the projectile. *Abilities that are marked as \"homing\" have a chance to not home into the target and instead deviate by a few degrees. This chance is determined by the speed of the attacker and the target. Slower ships have a lesser chance to fire homing projectiles onto faster ships. shotgun Shotgun abilities fire multiple projectiles at once. They inherit properties from the projectile archetype. Specific properties: bulletAmount : number, amount of projectiles to fire. spreadAngle : number, the random deviation, in degrees, for each projectile fired. Ex. 180 means the projectiles can deviate 90 degrees in either direction from where the ability is aimed. summon Summon-type abilities summon a ship when used. Summons are temporary ships that do not return to your fleet after finishing an expedition. Used by the Queen ship. Specific properites: summonedShip : string, the ID of the ship to summon. See ship types . To use your custom ships, you must prefix their ID with your mod ID and an underscore. summonRadius : number, the radius (centered on caster) within which the ship is summoned. maxSummons : number, the ability will do nothing if the caster already has this amount of summons, or more, regardless of what ability they came from. spiral Spiral-type abilities fire bullets around the caster, with each shot being offset by a few degrees from the last one. Used by some enemies (like angels) in the base game. Inherits properties from the projectile archetype, but cannot home into enemies. Specific properties: shotsPerLoop : number, the amount of bullets fired per 'cycle'. Ex. if this is 4 , each bullet would be fired 90 degrees away from the last one. bulletDetonation BulletDetonation-type abilities remove all of the ship's current bullets on the field, then cast an ability from their place. Used by the Porcupine ship for its shrapnel ability. Specific properites: boundAbility : string, the ID of the ability to cast. Does not need to be prefixed with your mod ID. summonSuicide Orders the user ship's summons to crash into enemy ships, destroying themselves in the process. Used by the Queen ship's active ability. Specific properites: summonSuicideAmount : number, the maximum amount of summons to suicide at once. damageMultiplier : number, a multiplier to the damage dealt by the ships suiciding. The damage dealt by ships suiciding is equal to their maxmimum health. explosive Causes an Area-of-Effect hit. Inherits properties from the projectile archetype. Specific properites: areaRadius : number, the radius of the explosion. 100 by default. explodeOnSelf : boolean, if true, the explosion will be centered on the caster, and will not create a projectile (it will explode almost instantly). healing Similar to explosive , but can deal percentage-based healing. Used by the Plover's active ability. Inherits properties from the explosive archetype. Specific properites: fractionHealing : number, the fraction of the user ship's maximum HP that the ability will heal for. flurry Flurry abilities cause the user ship to fire an additional ability while they're active (during their duration , which must be > 0 for this ability type to work). Used by the Gecko's active ability for its \"manual firing mode\". Properties: boundAbility : string, the ID of the ability to use while the flurry is active. Must be a projectile -type ability, or one that inherits properties from it. This ability must have ignoreShipBusyState set to true , otherwise it will not fire. It must also have canAutoFire set to false . clickingAbility : string, the ID of the ability to use instead of boundAbility while the player is manually clicking on the battlefield. This requires the player to have the flurryClicking boost. While being used, the cooldown for boundAbility is repeatedly set to 0.25 so they cannot be used at the same time. requiresClicking : boolean, if true, the boundAbility will not be used, only the clickingAbility (which requires the player to click). maxClicksPerSecond : number, the maximum clicks per second that the clickingAbility admits. Set to negative to disable this limit. You do not need to prefix the ability IDs with your mod's ID. sentry Sentry abilities fire a projectile (the \"sentry\") that, until it expires, continuously casts another skill from its place, using the stats of the ship that started the ability. It is used by the Salamander's active ability and inherits properties from the projectile archetype. It is recommended to use these with manuallyAimed , explodeAtCursor set to true and target set to -1 , so the sentry 'lands' where your cursor points. Properties: sentryAbility : string, the ID of the ability to fire from the sentry's position. Should not be prefixed with your mod's ID. onlyFireAfterArrival : boolean, defaults to true; if false, the sentry will be able to use its ability before \"settling in\"","title":"Abilities"},{"location":"abilities/#abilities","text":"Abilities refer both to the active abilities of ships, as well as their automatic weapons. They are defined in the Abilities folder. Aside from the mandatory stringId field, abilities must also define an archetype . The archetype defines the behaviour of the ability, each of them having additional properties specific to them. The words \"user ship\" and \"caster\" here refer to the ship using the ability.","title":"Abilities"},{"location":"abilities/#common-properties","text":"These properties can be set on any ability. icon : string, the sprite filename for the ability icon. abilityNameTranslationKey : string, the text key for the ability's name. Shown when you hover over a ship in the fleet menu that has this ability as an active. abilityDescriptionTranslationKey string, the text key for the ability's description. Shown when you hover over a ship in the fleet menu that has this ability as an active. Supports parameters, see the text docs . target : number, determines who this ability is aimed at. -1 : None; the projectile will be fired straight towards where the ship is pointing. 0 : Enemies of the caster (the ability's user) 1 : Allies of the caster 2 : Same as -1, but allows the projectile to hit the ship that created it, as well as allies (useful for healing abilities) charges : number, the maximum amount of charges the ability can store. An ability can be used so long as it has charges remaining. Defaults to 1 . cooldown : number, the time between the ability's charges being restored. Defaults to 0.2 . firingDelay : number, a minimum delay between charges of the ability being usable. onlyReloadAtNoCharges : boolean. If false , 1 charge of the ability will be replenished every cooldown seconds. If true , all charges will be replenished after cooldown seconds once charges reach 0. Use true to create weapons that reload their whole clip at once. Defaults to true . canBeAutoFired : boolean, determines if the ship can use this ability automatically. Use false for active abilities. manuallyAimed : boolean, determines if the ability should be aimed with the player's cursor. duration : number, the duration of the ability. If >0, the ability is considered a durative ability; by default, no other abilities can be used alongside a durative ability until its duration ends. ignoreShipBusyState : boolean, if true, the ability will be usable even while the ship is using a durative ability. hitAllies : boolean, if true, the ability will be able to hit allies of the caster. hitSelf : boolean, if true, the ability will be able to hit the caster. setAimingCursor : boolean, if true, the cursor will be set to a crosshair when using the ability, if it is a durative one. useSound : number, the sound to play when the ability is used. See sounds enumeration . statusesApplied : list of status effects to apply to the target, with the following structure: \"statusesApplied\": [ { \"id\": 1, \"duration\": 5 } ], Where id is the ID of the status effect, and duration is the duration in seconds. Available status effects are: 0 : \"Guardian Angel\"; multiplies damage taken by 0.6 , and redirects that portion to the ship that applied the status as unresistable damage. Used by the Tortoise. 1 : Disarm; prevents the ship from using any abilities. 2 : Shielded; multiplies damage taken by 0.25 . 3 : Reflect; causes most projectiles that were to hit the ship to be reflected back to their caster. Reflected projectiles are always homing.","title":"Common properties"},{"location":"abilities/#archetypes","text":"The archetype field of an ability defines its behaviour. The available archetypes are the following:","title":"Archetypes"},{"location":"abilities/#projectile","text":"Projectile abilities create projectiles that move across the screen, and land hits upon colliding with a valid target. Multiple other archetypes are based on it, inheriting its properties: dmgMultiplier : number, the multiplier for the ability's damage. Ex. 1.5 will deal 150% of the ship's damage. damageType : number, the type of damage the ability deals. See damage type enumeration . homingByDefault : boolean, if true, the projectile will home into its target, unless it missed*. Defaults to true . travelSpeed : number, the speed of the projectile. Default is 100 . unmissable : boolean, if true, the ability will not miss if it's also set to be homing. projectileRendererScale : number, a multiplier for the scale of the projectile. Defaults to 1 . piercing : boolean, if true, the projectile will not be deleted upon landing a hit and will instead turn into a non-homing projectile (if it was homing) and continue travelling in a straight line, possibly hitting additional targets. hitCooldown : number, the duration (in seconds) that must pass before a ship can be hit again by the same projectile. Used for piercing projectiles. Defaults to 0.2 . lifetime : number, the duration (in seconds) that this projectile can exist for before disappearing. Defaults to 10 . explodeAtCursor : boolean, if true, the projectile will pass through any targets and only explode at the position the cursor was on when it was cast. Only intended to be used for active player abilities. firingAngle : number, offsets the aiming direction of the projectile, in degrees. Normally projectiles are fired towards their target; this property lets you add a degree offset. impactSound : number, the sound the projectile will make upon landing a hit. See sounds enumeration . projectileSpriteOverride : string, the sprite filename for the projectile. *Abilities that are marked as \"homing\" have a chance to not home into the target and instead deviate by a few degrees. This chance is determined by the speed of the attacker and the target. Slower ships have a lesser chance to fire homing projectiles onto faster ships.","title":"projectile"},{"location":"abilities/#shotgun","text":"Shotgun abilities fire multiple projectiles at once. They inherit properties from the projectile archetype. Specific properties: bulletAmount : number, amount of projectiles to fire. spreadAngle : number, the random deviation, in degrees, for each projectile fired. Ex. 180 means the projectiles can deviate 90 degrees in either direction from where the ability is aimed.","title":"shotgun"},{"location":"abilities/#summon","text":"Summon-type abilities summon a ship when used. Summons are temporary ships that do not return to your fleet after finishing an expedition. Used by the Queen ship. Specific properites: summonedShip : string, the ID of the ship to summon. See ship types . To use your custom ships, you must prefix their ID with your mod ID and an underscore. summonRadius : number, the radius (centered on caster) within which the ship is summoned. maxSummons : number, the ability will do nothing if the caster already has this amount of summons, or more, regardless of what ability they came from.","title":"summon"},{"location":"abilities/#spiral","text":"Spiral-type abilities fire bullets around the caster, with each shot being offset by a few degrees from the last one. Used by some enemies (like angels) in the base game. Inherits properties from the projectile archetype, but cannot home into enemies. Specific properties: shotsPerLoop : number, the amount of bullets fired per 'cycle'. Ex. if this is 4 , each bullet would be fired 90 degrees away from the last one.","title":"spiral"},{"location":"abilities/#bulletdetonation","text":"BulletDetonation-type abilities remove all of the ship's current bullets on the field, then cast an ability from their place. Used by the Porcupine ship for its shrapnel ability. Specific properites: boundAbility : string, the ID of the ability to cast. Does not need to be prefixed with your mod ID.","title":"bulletDetonation"},{"location":"abilities/#summonsuicide","text":"Orders the user ship's summons to crash into enemy ships, destroying themselves in the process. Used by the Queen ship's active ability. Specific properites: summonSuicideAmount : number, the maximum amount of summons to suicide at once. damageMultiplier : number, a multiplier to the damage dealt by the ships suiciding. The damage dealt by ships suiciding is equal to their maxmimum health.","title":"summonSuicide"},{"location":"abilities/#explosive","text":"Causes an Area-of-Effect hit. Inherits properties from the projectile archetype. Specific properites: areaRadius : number, the radius of the explosion. 100 by default. explodeOnSelf : boolean, if true, the explosion will be centered on the caster, and will not create a projectile (it will explode almost instantly).","title":"explosive"},{"location":"abilities/#healing","text":"Similar to explosive , but can deal percentage-based healing. Used by the Plover's active ability. Inherits properties from the explosive archetype. Specific properites: fractionHealing : number, the fraction of the user ship's maximum HP that the ability will heal for.","title":"healing"},{"location":"abilities/#flurry","text":"Flurry abilities cause the user ship to fire an additional ability while they're active (during their duration , which must be > 0 for this ability type to work). Used by the Gecko's active ability for its \"manual firing mode\". Properties: boundAbility : string, the ID of the ability to use while the flurry is active. Must be a projectile -type ability, or one that inherits properties from it. This ability must have ignoreShipBusyState set to true , otherwise it will not fire. It must also have canAutoFire set to false . clickingAbility : string, the ID of the ability to use instead of boundAbility while the player is manually clicking on the battlefield. This requires the player to have the flurryClicking boost. While being used, the cooldown for boundAbility is repeatedly set to 0.25 so they cannot be used at the same time. requiresClicking : boolean, if true, the boundAbility will not be used, only the clickingAbility (which requires the player to click). maxClicksPerSecond : number, the maximum clicks per second that the clickingAbility admits. Set to negative to disable this limit. You do not need to prefix the ability IDs with your mod's ID.","title":"flurry"},{"location":"abilities/#sentry","text":"Sentry abilities fire a projectile (the \"sentry\") that, until it expires, continuously casts another skill from its place, using the stats of the ship that started the ability. It is used by the Salamander's active ability and inherits properties from the projectile archetype. It is recommended to use these with manuallyAimed , explodeAtCursor set to true and target set to -1 , so the sentry 'lands' where your cursor points. Properties: sentryAbility : string, the ID of the ability to fire from the sentry's position. Should not be prefixed with your mod's ID. onlyFireAfterArrival : boolean, defaults to true; if false, the sentry will be able to use its ability before \"settling in\"","title":"sentry"},{"location":"ascension/","text":"Ascension The Ascension tree can be modified for each campaign by creating a file in the campaign folder named the same way as the campaign file, with the .ascensiontree extension. The file is in the json format, with the following structure, with 2 top-level properties: nodes and offset . nodes is dictionary containing the upgrades in the tree, with the following format: \"ascension_discounts_guilds\": { \"coords\": [-357, 93], \"parents\": [\"ascension_discounts_upgrades\"] }, The key is the upgrade ID. Must be prefixed with your mod's ID and an underscore if using your own upgrades. coords are the coordinates of the upgrade in the menu. parents is a list of upgrades that must be bought before this one can be bought. It defines the connections in the tree, and can be empty. offset is a dictionary with the following format. The coordinates here are used to offset the whole tree. It's optional, but useful for centering the tree onto the screen. \"offset\": { \"x\": -70, \"y\": 0 } Example The following example is the Ascension tree of the vanilla campaign; useful as a starting point, or to reference coordinate positions. { \"nodes\": { \"ascension_core\": { \"coords\": [57, -401], \"parents\": [] }, \"overtime\": { \"coords\": [-143, -284], \"parents\": [\"ascension_core\"] }, \"ascension_discounts_upgrades\": { \"coords\": [-240, -78], \"parents\": [\"overtime\"] }, \"ascension_discounts_guilds\": { \"coords\": [-357, 93], \"parents\": [\"ascension_discounts_upgrades\"] }, \"ascension_offline_2\": { \"coords\": [-387, -240], \"parents\": [\"overtime\"] }, \"ascension_offline_3\": { \"coords\": [-493, -55], \"parents\": [\"ascension_offline_2\"] }, \"ascension_offline_4\": { \"coords\": [-508, 133], \"parents\": [\"ascension_offline_3\"] }, \"ascension_offline_5\": { \"coords\": [-511, 346], \"parents\": [\"ascension_offline_4\"] }, \"ascension_bulk_research\": { \"coords\": [-178, 128], \"parents\": [\"ascension_discounts_upgrades\"] }, \"ascension_bulk_select\": { \"coords\": [-325, 283], \"parents\": [\"ascension_bulk_research\"] }, \"ascension_basebuilding_replicators\": { \"coords\": [8, -151], \"parents\": [\"ascension_core\"] }, \"ascension_basebuilding_synergies_tier2\": { \"coords\": [-10, 67.00005], \"parents\": [\"ascension_basebuilding_replicators\"] }, \"ascension_basebuilding_synergies_tier3\": { \"coords\": [-46, 246], \"parents\": [\"ascension_basebuilding_synergies_tier2\"] }, \"ascension_clicking_base_asteroid_value\": { \"coords\": [191, -184], \"parents\": [\"ascension_core\"] }, \"ascension_candy_effect\": { \"coords\": [236, -21], \"parents\": [\"ascension_clicking_base_asteroid_value\"] }, \"ascension_clicking_keyboard\": { \"coords\": [252, 149], \"parents\": [\"ascension_candy_effect\"] }, \"ascension_clicking_keyboard_strast\": { \"coords\": [312, 303], \"parents\": [\"ascension_clicking_keyboard\"] }, \"ascension_lunchboxes\": { \"coords\": [300, -341.6], \"parents\": [\"ascension_core\"] }, \"ascension_combat_cooking_t1\": { \"coords\": [400, -170.6], \"parents\": [\"ascension_lunchboxes\"] }, \"ascension_headstart\": { \"coords\": [637, -140], \"parents\": [\"ascension_combat_cooking_t1\"] }, \"ascension_combat_cooking_t2\": { \"coords\": [482.7, -15.6], \"parents\": [\"ascension_combat_cooking_t1\"] }, \"ascension_fleet_cooldown\": { \"coords\": [375, 100], \"parents\": [\"ascension_combat_cooking_t2\"] }, \"ascension_combat_cooking_t3\": { \"coords\": [511.6999, 157], \"parents\": [\"ascension_combat_cooking_t2\"] }, \"ascension_multicast\": { \"coords\": [533, -319], \"parents\": [\"ascension_lunchboxes\"] }, \"ascension_map_queue\": { \"coords\": [675, -280], \"parents\": [\"ascension_multicast\"] }, \"ascension_autohealthpacks\": { \"coords\": [810, -210], \"parents\": [\"ascension_map_queue\"] }, \"ascension_academy_unlock\": { \"coords\": [700, 47], \"parents\": [\"ascension_headstart\"] }, \"ascension_pumpjack_unlock\": { \"coords\": [697, 219], \"parents\": [\"ascension_academy_unlock\"] } }, \"offset\": { \"x\": -70, \"y\": 0 } }","title":"Ascension"},{"location":"ascension/#ascension","text":"The Ascension tree can be modified for each campaign by creating a file in the campaign folder named the same way as the campaign file, with the .ascensiontree extension. The file is in the json format, with the following structure, with 2 top-level properties: nodes and offset . nodes is dictionary containing the upgrades in the tree, with the following format: \"ascension_discounts_guilds\": { \"coords\": [-357, 93], \"parents\": [\"ascension_discounts_upgrades\"] }, The key is the upgrade ID. Must be prefixed with your mod's ID and an underscore if using your own upgrades. coords are the coordinates of the upgrade in the menu. parents is a list of upgrades that must be bought before this one can be bought. It defines the connections in the tree, and can be empty. offset is a dictionary with the following format. The coordinates here are used to offset the whole tree. It's optional, but useful for centering the tree onto the screen. \"offset\": { \"x\": -70, \"y\": 0 }","title":"Ascension"},{"location":"ascension/#example","text":"The following example is the Ascension tree of the vanilla campaign; useful as a starting point, or to reference coordinate positions. { \"nodes\": { \"ascension_core\": { \"coords\": [57, -401], \"parents\": [] }, \"overtime\": { \"coords\": [-143, -284], \"parents\": [\"ascension_core\"] }, \"ascension_discounts_upgrades\": { \"coords\": [-240, -78], \"parents\": [\"overtime\"] }, \"ascension_discounts_guilds\": { \"coords\": [-357, 93], \"parents\": [\"ascension_discounts_upgrades\"] }, \"ascension_offline_2\": { \"coords\": [-387, -240], \"parents\": [\"overtime\"] }, \"ascension_offline_3\": { \"coords\": [-493, -55], \"parents\": [\"ascension_offline_2\"] }, \"ascension_offline_4\": { \"coords\": [-508, 133], \"parents\": [\"ascension_offline_3\"] }, \"ascension_offline_5\": { \"coords\": [-511, 346], \"parents\": [\"ascension_offline_4\"] }, \"ascension_bulk_research\": { \"coords\": [-178, 128], \"parents\": [\"ascension_discounts_upgrades\"] }, \"ascension_bulk_select\": { \"coords\": [-325, 283], \"parents\": [\"ascension_bulk_research\"] }, \"ascension_basebuilding_replicators\": { \"coords\": [8, -151], \"parents\": [\"ascension_core\"] }, \"ascension_basebuilding_synergies_tier2\": { \"coords\": [-10, 67.00005], \"parents\": [\"ascension_basebuilding_replicators\"] }, \"ascension_basebuilding_synergies_tier3\": { \"coords\": [-46, 246], \"parents\": [\"ascension_basebuilding_synergies_tier2\"] }, \"ascension_clicking_base_asteroid_value\": { \"coords\": [191, -184], \"parents\": [\"ascension_core\"] }, \"ascension_candy_effect\": { \"coords\": [236, -21], \"parents\": [\"ascension_clicking_base_asteroid_value\"] }, \"ascension_clicking_keyboard\": { \"coords\": [252, 149], \"parents\": [\"ascension_candy_effect\"] }, \"ascension_clicking_keyboard_strast\": { \"coords\": [312, 303], \"parents\": [\"ascension_clicking_keyboard\"] }, \"ascension_lunchboxes\": { \"coords\": [300, -341.6], \"parents\": [\"ascension_core\"] }, \"ascension_combat_cooking_t1\": { \"coords\": [400, -170.6], \"parents\": [\"ascension_lunchboxes\"] }, \"ascension_headstart\": { \"coords\": [637, -140], \"parents\": [\"ascension_combat_cooking_t1\"] }, \"ascension_combat_cooking_t2\": { \"coords\": [482.7, -15.6], \"parents\": [\"ascension_combat_cooking_t1\"] }, \"ascension_fleet_cooldown\": { \"coords\": [375, 100], \"parents\": [\"ascension_combat_cooking_t2\"] }, \"ascension_combat_cooking_t3\": { \"coords\": [511.6999, 157], \"parents\": [\"ascension_combat_cooking_t2\"] }, \"ascension_multicast\": { \"coords\": [533, -319], \"parents\": [\"ascension_lunchboxes\"] }, \"ascension_map_queue\": { \"coords\": [675, -280], \"parents\": [\"ascension_multicast\"] }, \"ascension_autohealthpacks\": { \"coords\": [810, -210], \"parents\": [\"ascension_map_queue\"] }, \"ascension_academy_unlock\": { \"coords\": [700, 47], \"parents\": [\"ascension_headstart\"] }, \"ascension_pumpjack_unlock\": { \"coords\": [697, 219], \"parents\": [\"ascension_academy_unlock\"] } }, \"offset\": { \"x\": -70, \"y\": 0 } }","title":"Example"},{"location":"boosts/","text":"Boosts Boosts define the effects of upgrades and food items. Every upgrade and food item from the base game uses them, meaning any effects that you see in the game can be used in your own mod. A single boost can contain multiple effects to apply; for example, the Eldritch Burger food gives production multipliers to 4 different buildings, at the same time. The game keeps track of all your upgrade multipliers, ship stat increases, unlocks, etc. by merging all your owned boosts into one. Owning an upgrade or a food item applies its boost. In the case of food, it's applied as many times as the amount of the food you have. There are 3 base types of boost properties: Numeric (double-type), which are simply added together to calculate the final value, and (in nearly all cases) accept negative values. These all default to 0. Binary/Flags (boolean-type), used for unlocking features. These can only be added, and not removed. For example, the Galaxy Map is unlocked if any owned boost sets the galaxyMap property to true . Other, specialized structures with parameters, such as ResourceProductionBoost , which gives a multiplier bonus to the production of a specific resource, optionally making it scale with some other game statistic. Boost properties This section lists all properties you can include in a boost, and their in-game effect. Unless otherwise specified, multiplier and percentage values are fractional and additive. That means that '1.5' will equal a +150% multiplier in-game, and combined with another boost that adds '2.5', will result in a +400% multiplier. Note that \"all production\", unless otherwise specified, does not affect energy nor candy production. Numeric boosts strangeAsteroidPotency : increases the effects of Strange Asteroids. Each unit (1) is equivalent to upgrading a Scanner by one level. Strange Asteroid effects have a base value, and a scaled value that is multiplied by the Strange Asteroid Potency. candyEffectMultiplier : adds multiplier to the candy multiplier. Ex. a value of 0.01 will make each candy grant 2% production. Note that candy is multiplicative with all other calculations. allProductionMultiplier : adds multiplier to the production of all non-energy buildings. Note that there are buildings which are unaffected by production multipliers. asteroidProductionMultiplier : adds multiplier to all resources gained from clicking asteroids. flatEnergy : adds a flat amount of energy. synergyMultiplier : adds a multiplier for the effects of synergies. Ex. a value of 0.5 will make numeric synergies 50% stronger. Chunk quirks are unaffected. candyGainMultiplier : adds a multiplier to the amount of candy you gain upon ascending. offlineProductionMultiplier : adds a multiplier to offline production. Offline production is capped at 100%. Negative offline production does nothing. baseAsteroidValue : adds extra base metal to asteroid production. keyboardStrastMultiplier : adds a multiplier to the chance of Strange Asteroids appearing while mining with the keyboard. activeProductionMultiplier : adds a multiplier to all production while you're not idling. You're considered idle if you haven't made any input outside of moving the mouse in the last few minutes, modifiable with the idlingMinutesThreshold boost. xpScannerScaling : adds a multiplier to XP production for each level of the Scanner building that you have. buildingCostsRefund : refunds a percentage of the metal spent on a building (including its level upgrades) when you demolish it. Capped at 100% of the metal spent. strastChanceMultiplier : adds a multiplier to the chance of Strange Asteroids appearing. baseStrastChance : adds to the base chance of a Strange Asteroid appearing. The base chance is 1% (0.01) in the vanilla campaign (set in the default boost ). productionMultiplierPerUniqueBuilding : adds a multiplier to all production for each unique building type currently owned. allProductionPerStrast : adds a multiplier to all production for each Strange Asteroid destroyed (total), up to a cap defined of +100%. lunchboxDoublingChance : adds a chance to gain 2x lunchboxes from a conquest. allProductionPerNode : adds a multiplier to all production for each galaxy map node conquered in the current ascension. strastCooldownFlatReduction : reduces the \"cooldown\" of Strange Asteroids by a flat amount of seconds. For each Strange Asteroid clicked, the chance of finding additional ones is reduced for a certain amount of seconds, with the penalty scaling down linearly as the cooldown approaches 0. idleProductionMultiplier : adds a multiplier to all production while you're idling. productionOnMissedStrast : gives X seconds of resource production whenever a Strange Asteroid despawns without having been collected. allBuildingsOwnedProduction : adds a multiplier to all production if you own every type of building. Does not exclude buildings you currently cannot obtain. obstacleSpawnMultiplier : adds a multiplier to the amount of obstacles that spawn in each chunk. randomUnavailableBuildingsCount : makes a certain amount of buildings unavailable to be built in the next ascension. Cannot affect buildings marked as \"essential\" (see the essentialBuildings boost). chunkQuirkMultiplier : adds a multiplier to the effect of quantifiable chunk quirks. startingUpgrades : causes you to start the next ascension with a number of randomly picked upgrades already unlocked, from upgrades that you owned in the previous ascension. Ascension, multi-choice, guild and league upgrades are excluded. keepUpgrades : allows you to pick a number of owned upgrades to keep for the next ascension. Multi-choice, league and guild upgrades are excluded. lunchboxT1Chance : adds a chance for Basic-tier 1 recipe foods to appear in lunchboxes. lunchboxT2Chance : adds a chance for Advanced-tier recipe foods to appear in lunchboxes. lunchboxT3Chance : adds a chance for Gourmet-tier recipe foods to appear in lunchboxes. spawnBudget : adds to the \"point budget\" of spawning enemies in fights. A higher budget means more enemies per fight. Stronger enemies cost more points to spawn. This also works on pre-defined encounters, by placing random enemies from the faction of the last ship to have been spawned from the encounter. Capped at +14. strastEffectDurationMultiplier : adds a multiplier to the duration of Strange Asteroid effects. resourceConversion : increases the exchange rate for converting fuel to experience at the Administrative Chamber - a feature unlocked if the player's total boost has this boost above 0. 0.5 equals +50% exchange rate. defaultEnergyRequirement : the base amount of energy required for optimal production. Ex. setting this to 10 will require the player to have 10 more energy for buildings to stay at 100% efficiency. defaultEnergy : the base amount of energy the player gets, which is unaffected by other multipliers. In the vanilla campaign, this is set to 1 in the default boost . strangeAsteroidChanceCooldown : the pseudo-cooldown between strange asteroids appearing. After activating a strange asteroids, the chance to find the next one scales linearly from 0 to your regular chance as this cooldown ticks down. This penalty is stackable. guild1Perk : affects the strength of the Scavenger guild's perk. guild2Perk : affects the strength of the Scientist guild's perk. guild3Perk : affects the strength of the Trader guild's perk. idlingMinutesThreshold : affects the time (in minutes) inactivity requirement for the game to consider the player to be idling. energyFormulaLeniency : affects the formula for production efficiency from energy. Higher numbers cause it to switch to a harsher curve later. healthpackConstant : the multiplier for healing received from healing packs. Ship/combat boosts combatExperienceMultiplier : adds multiplier for the experience gained after winning a space fight. shipDamageMultiplier : damage multiplier for all player ships. shipHealingMultiplier : multiplier for all healing received by player ships from abilities . Does not affect health packs. shipHealthMultiplier : multiplier for the maximum health of all player ships. shipFullHpDamageMultiplier : increases damage dealt by player ships at 100% HP. shipDodgeChance : adds a chance for incoming damage to be negated. shipScenarioHealing : heals a % of each ship's health upon winning a fight. lowHpDR : adds incoming damage reduction to ships below 25% health. shipDamageBoostOnAllyDeath : adds a multiplier to player ship damage when an allied, non-summon ship dies, until the end of the expedition. shipHealthMultiplierPerUniqueShip : adds a multiplier to ship maximum health based on the amount of unique ship types in the fleet upon starting an expedition, until the end of it. shipRegularResistance : adds a % of \"regular-type\" incoming damage that is resisted. healthpackHealing : adds a multiplier to the healing received from health packs. randomUnavailableShipsCount : makes a certain amount of purchasable ships unavailable to be bought in the next ascension. The starting ship cannot be affected by this. healthpackIntervalMultiplier : adds a multiplier to the cooldown between health packs spawning. galaxyMapInfluence : adds a flat amount of \"influence\" to the current galaxy map. Influence is normally gained after each conquered node, and is used to scale enemy level. fleetCooldown : increases the cooldown for deploying ships. fleetSize : increases the amount of ships you can deploy in a fleet. Does not support negative values! Discounts Discount boosts are additive with each other and a flat %, with the exception of the building discount, which follows a diminishing returns formula. differentGuildDiscount : adds a discount to guild-exclusive upgrades, if the upgrade's associated guild is different from the one you were in the previous ascension. previousUpgradesDiscount : adds a discount to upgrades that have been bought in previous ascensions. buildingCostsReduction : adds a (buildingCostsReduction / (buildingCostsReduction + 1)) discount to the price of building buildings. Flags idleStrastBoost : increases the chance of finding Strange Asteroids, if you haven't collected one in over 15 minutes. Scales over the spawn of 20 minutes, up to a 2.5x chance multiplier. keyboardClicking : allows you to collect asteroids on-screen by jamming on your keyboard. Applies a penalty to Strange Asteroid chance while in use (see the keyboardStrastMultiplier boost). cookingTier1 : allows you to cook Basic-tier recipes. cookingTier2 : allows you to cook Advanced-tier recipes. cookingTier3 : allows you to cook Gourmet-tier recipes. synergiesTier1 : enables Basic-tier synergies. synergiesTier2 : enables Advanced-tier synergies. synergiesTier3 : enables Legendary-tier synergies. flurryClicking : allows you to click to fire additional bullets when using Flurry-type abilities. ascension : enables the Ascension button. chunkQuirks : enables chunk quirks. galaxyMap : enables the Galaxy map button, and deploying fleets. combatAbilities : enables combat abilities for your ships. combatExperienceScaling : multiplies XP gained from combat based on your achievement completion. Having X% of all achievements unlocked equals an X% increase in XP gained. lunchboxes : enables getting lunchboxes from conquests. endlessCombat : enables fighting in the space wilderness. showLunchboxHint : does nothing. Used by lunchboxes to display a \"Click to open\" hint. headstart : causes the closest connected node to the galaxy map's starting point to start nearly-fully conquered (with only one fight remaining). strastLunchbox : causes you to gain a lunchbox when you activate Strange Asteroids while already under the effect of another. buyAllUpgrades : enables the \"buy all upgrades from this tier\" button in the upgrades menu. multiSelect : enables multi-selecting buildings with shift+click. multiCasting : allows you to have all ships of one type fire their abilities at once by shift+clicking the ability. loadouts : enables saving and buying fleet loadouts. galaxyMapQueue : enables you to queue up locations to conquer on the galaxy map by right clicking nodes. If the queue is not empty and you have a loadout save when you lose, you will automatically try to deploy a new fleet of that loadout once the deployment cooldown runs out. autoHealthpacks : enables automatically collecting health packs, right before they would normally despawn. Other fields The following boosts use more complex structures; you need to be careful to follow their format. You do not need to include all the sub-properties they have. Unmentioned ones will be set to a default value (almost always 0/false). Most of these are lists, meaning you can stack multiple instances of their effect onto a single boost. This is useful in case you want to, for example, create an upgrade that increases both metal and experience production, by different amounts. resourceProductionBoosts A list of boosts which modify the production of a specific resource. Example: increases experience production by 100%, +1% per achievement unlocked, +5% per synergy active, +5% per building owned, +2% per food cooked, and +1% for each click in the last minute. \"resourceProductionBoosts\": [ { \"resourceId\": 1, \"multiplier\": 1, \"multiplierPerAchievement\": 0.01, \"multiplierPerSynergy\": 0.05, \"multiplierPerBuilding\": 0.05, \"multiplierPerFoodCookedTotal\": 0.02, \"multiplierPerClick\": 0.01 } ], Properties: resourceId : number, the ID of the resource to apply the effects to. See resources enumeration multiplier : number, an unconditional multiplier for the resource's production. multiplierPerAchievement : number, adds a multiplier to the resource's production for each achievement level owned. multiplierPerSynergy : number, adds a multiplier for each synergy active. multiplierPerBuildings : number, adds a multiplier for each building owned. multiplierPerFoodCooked : number, adds a multiplier for each food item cooked in the current Ascension. multiplierPerFoodCookedTotal : number, adds a multiplier for each food item cooked across all Ascensions. multiplierPerClick : number, adds a multiplier for each asteroid click in the last minute. multiplicativeResourceProductionBoosts Similar to a ResourceProductionBoost , but increases production multiplicatively instead of adding to an existing multiplier. Example: Doubles metal production and halves experience production. \"multiplicativeResourceProductionBoosts\": [ {\"resource\": 0, \"multiplicativeBoost\": 2}, {\"resource\": 1, \"multiplicativeBoost\": 0.5}, ], Properties: resourceId : number, the ID of the resource to apply the effects to. See resources enumeration multiplicativeBoost : number, the multiplier. Ex. '2' equals 2x. multiplicativeAllProductionBoosts Similar to multiplicativeResourceProductionBoosts , but affects \"all production\". That is, all resource production except candy and energy. Example: Halves all resource production. \"multiplicativeAllProductionBoosts\": [ {\"multiplicativeBoost\": 0.5} ], Properties: multiplicativeBoost : number, the multiplier. '2' equals 2x. buildingProductionBoosts A list of boosts to specific buildings. Example: Increases Metal Mine's base production by 1 metal, reduces energy consumption by 50% and multiplies their overall production by 2x. \"buildingProductionBoosts\": [ { \"buildingId\": \"metal_mine\", \"baseProduction\": 1.0, \"multiplier\": 0.0, \"energyConsumptionMutliplier\": -0.5, \"multiplicativeBoost\": 2.0 } ], Properties: buildingId : string, the ID of the building to apply the effects to. Leave as \"\" to affect all buildings. See building types . affectAll : boolean, same effect as setting buildingId to an empty string. baseProduction : number, increases the base resource production of the building by a flat amount. multiplier : number, adds to the multiplier of the building's production. energyConsumptionMultiplier : number, adds to the multiplier for the building's energy consumption. Ex. 0.5 makes the build use up 50% more energy. extraBuildingLimit : number, increases the building's building placement limit, if it has one set. shipBoosts A list of boosts to specific player ships. Example: Gives the Wasp 100% more health (additive, as is the case with all boosts unless otherwise specified) and makes its active ability shoot 2 more bullets. \"shipBoosts\": [ { \"shipId\": \"wasp\", \"healthMultiplier\": 1.0, \"abilityShotgunBullets\": 2 } ], Properties: shipId : string, the ID of the ship this effect applies to. See ship types . Needs to be prefixed with your mod ID and an underscore to reference your custom ships. affectAllShips : boolean, if true, this set of boosts will apply to all ships. healthMultiplier : number, adds to the multiplier of the ship's maximum health. damageMultiplier : number, adds to the multiplier of the ship's damage. abilityShotgunBullets : integer, adds an amount of extra bullets fired for Shotgun-type abilities. abilityExplosionRadiusBoost : number, increases the radius of AoE attacks. abilityShotgunAngle : number, increases the firing angle of Shotgun-type abilities. accurate : boolean, if true, the ship will never fail accuracy checks*. healingDoT : number, heals the ship by a percentage of its health every 5 seconds. critChance : number, adds a chance to deal critical hits with attacks. Critical hits get a multiplier applied to them, 3x by default. fleetUniqueHealthMultiplier : number, adds to the ship's health multiplier for each unique ship type in the fleet at the start of an expedition. fleetUniqueDamageMultiplier : number, adds to the ship's damage multiplier for each unique ship type in the fleet at the start of an expedition. dodgeAtFullHealth : number, adds dodge chance when the ship is at full health. Dodging an attack completely negates its damage and any other effects of the hit. cooldownPercentageReduction : number, reduces the cooldown of active abilities by a percentage. volatileDamageForQuickFight : number, adds to the ship's damage multiplier if the previous fight was completed in less than 10 seconds. Does not stack, and is removed after a battle that did not meet the criteria. comebackChance : number, adds a chance for the ship to be healed to full health instead of dying, once per expedition. healingOnAbility : number, heals ships that use their active ability for a fraction of their maximum health. damageMultiplierPerEnemy : number, adds to the ship's damage multiplier for each enemy present at the start of a fight. *Abilities that are marked as \"homing\" have a chance to not home into the target and instead deviate by a few degrees. This chance is determined by the speed of the attacker and the target. Slower ships have a lesser chance to fire homing projectiles onto faster ships. shipMultiplicativeHealthBoosts and shipMultiplicativeDamageBoosts Multiplies a ship's maximum health and damage respectively. Example: doubles health of all player ships, and halves the damage of wasps. \"shipMultiplicativeHealthBoosts\": [{\"shipId\": \"\", \"multiplicativeBoost\": 2}], \"shipMultiplicativeDamageBoosts\": [{\"shipId\": \"wasp\", \"multiplicativeBoost\": 0.5}], Properties: shipId : string, the ID of the ship to affect. Needs to be prefixed with your mod ID and an underscore to reference your custom ships. If empty, will affect all ships. multiplicativeBoost : number, the multiplier. buildingUnlocks A list of buildings that the boost unlocks for construction. See building types . Example: Unlocks the Metal Mine and Academy buildings. \"buildingUnlocks\": [\"metal_mine\", \"academy\"], shipUnlocks A list of ships that the boost unlocks for the player. See ship types . Remember that your own ships must be prefixed with your mod ID and an underscore! Example: Unlocks the Tortoise and a custom ship. \"shipUnlocks\": [\"porcupine\", \"pip_example_mod_whale\"], strastEffects A list of Strange Asteroid effects that the boost unlocks. See strast types . Example: unlocks the Gambler's asteroid (the one that randomizes production for X seconds) \"strastEffects\": [\"randomized_production\"], completeSynergyTierBoosts Adds to the all production multiplier when all synergies of a specified tier are active. See synergy tier IDs . Example: adds 100% all production if all basic synergies are active, and +200% if all advanced synergies are active. \"completeSynergyTierBoosts\": [ {\"tier\": 1, \"multiplier\": 1}, {\"tier\": 2, \"multiplier\": 2} ], Properties: - tier : number, the synergy tier to require. See synergy tier IDs . - multiplier : number, adds to the all production multiplier if all synergies from the tier are active. playtimeProductionBoosts Adds to the all production multiplier, based on how much time has elapsed since you started your playthrough. Example: adds +1% fuel production for each minute since you started playing, up to +300%. \"playtimeProductionBoosts\": [ { \"resource\": 4, \"increment\": 0.01, \"interval\": 60, \"maximum\": 3 } ], synergyBoosts Makes a specific synergy stronger. Example: makes Tunnel System synergies 100% more powerful. \"synergyBoosts\": [ { \"id\": 0, \"multiplier\": 1 } ], Properties: id : number, the ID of the synergy to affect. See synergy IDs . multiplier : number, adds to the multiplier of the synergy's effect. guildBoosts Adds a multiplier to all production for each time you join a specific guild. Example: adds +150% all production for each time you join the Scavenger guild. \"guildBoosts\": [ { \"id\": 0, \"multiplierPerJoin\": 1.5 } ], Properties: - id : number, the ID of the guild to use for the effect. See guild IDs . - multiplierPerJoin : number, adds to the all production multiplier for each time you joined the guild. leagueBoosts Similar to a GuildBoost , but for leagues! Wow! Example: adds +50% to all production for each time you've joined the Schemist league. \"leagueBoosts\": [ { \"id\": 1, \"multiplierPerJoin\": 0.5 } ], Properties: - id : number, the ID of the league to use for the effect. See league IDs . - multiplierPerJoin : number, adds to the all production multiplier for each time you joined the league. strastBoosts Makes a specific Strange Asteroid effect stronger. Example: makes the Gambler's asteroid 100% stronger. \"strastBoosts\": [ { \"stringId\": \"randomized_production\", \"multiplier\": 1 } ], Properties: - stringId : string, the ID of the Strange Asteroid effect to affect. See Strange Asteroid effect IDs . - multiplier : number, adds to the multiplier of the effect's strength. This is a separate multiplier from the scaling gained from Scanner levels. synergyScalingExclusions A list of Synergies to exclude from scaling with any boosts that increase their strength. This affects all boosts, not just the one this is included in. Chunk quirks are unaffected. See synergy IDs . Example: makes Unlucky Luck, Spectroscopy and Fractal Matter unable to gain bonuses from boosts that would scale them. \"synergyScalingExclusions\" = [17, 9, 22], clickingExtraResourceBoosts Increases the resources you gain from clicking asteroids by a percentage of your production per second. Example: makes asteroids give +1% of your Metal production, per Metal Mine built. \"clickingExtraResourceBoosts\": [ { \"id\": 0, \"multiplier\": 0.01, \"buildingAmountScaling\": \"metal_mine\" } ], essentialBuildings A list of buildings that cannot be made unavailable by the randomUnavailableBuildingsCount boost. Example: the vanilla list of essential buildings. \"essentialBuildings\": [\"metal_mine\", \"academy\", \"pumpjack\", \"research_lab\", \"scanner\", \"solar_panel\"], delayedCandyBoosts Adds to the multiplier of candy gained upon ascending, for each real-life day elapsed since your last ascension. Example: increases candy gained from ascending by +100% for each day elapsed, up to +200%. \"delayedCandyBoosts\": [ { \"multiplier\": 1, \"daysCap\": 2 } ], Properties: - multiplier : number, the multiplier added for each day elapsed. - daysCap : number, the maxmimum amount of days this effect stacks for. previousGuildBoosts Adds to the all production multiplier if your previous guild was the one specified. Example: increases all production by 50% if your previous guild was the Scientist guild. \"previousGuildBoosts\": [ {\"id\": 1, \"multiplier\": 0.5} ], Properties: - id : number, the ID of the guild to require. See guild IDs . - multiplier : number, adds to the all production multiplier if your previous guild was the one specified in this effect. overflowedEnergyProductionBoosts Adds to the all production multiplier, scaling with the amount of excess energy that you have (energy over your required amount for optimal building production). Example: adds +1% to all production for each 1 energy over your optimum amount, up to +100%. \"overflowedEnergyProductionBoosts\": [ { \"multiplier\": 0.01, \"additiveCap\": 1 } ], Properties: - multiplier : number, adds to the all production multiplier for each point of excess energy. - additiveCap : number, the cap to the multiplier you can get from this effect. upgradeUnlocks A list of upgrades to unlock upon the boost being first applied, or upon ascending. Only works as a boost for upgrades, not food items. Used in the vanilla game for the ascension upgrades that make you start with buildings already unlocked, by unlocking their upgrades (so as to hide them from the upgrades screen). To reference your own upgrades, you must prefix them with your mod ID and an underscore. Example: unlocks the upgrade that allows building academies. \"upgradeUnlocks\": [\"academy_unlock\"],","title":"Boosts"},{"location":"boosts/#boosts","text":"Boosts define the effects of upgrades and food items. Every upgrade and food item from the base game uses them, meaning any effects that you see in the game can be used in your own mod. A single boost can contain multiple effects to apply; for example, the Eldritch Burger food gives production multipliers to 4 different buildings, at the same time. The game keeps track of all your upgrade multipliers, ship stat increases, unlocks, etc. by merging all your owned boosts into one. Owning an upgrade or a food item applies its boost. In the case of food, it's applied as many times as the amount of the food you have. There are 3 base types of boost properties: Numeric (double-type), which are simply added together to calculate the final value, and (in nearly all cases) accept negative values. These all default to 0. Binary/Flags (boolean-type), used for unlocking features. These can only be added, and not removed. For example, the Galaxy Map is unlocked if any owned boost sets the galaxyMap property to true . Other, specialized structures with parameters, such as ResourceProductionBoost , which gives a multiplier bonus to the production of a specific resource, optionally making it scale with some other game statistic.","title":"Boosts"},{"location":"boosts/#boost-properties","text":"This section lists all properties you can include in a boost, and their in-game effect. Unless otherwise specified, multiplier and percentage values are fractional and additive. That means that '1.5' will equal a +150% multiplier in-game, and combined with another boost that adds '2.5', will result in a +400% multiplier. Note that \"all production\", unless otherwise specified, does not affect energy nor candy production.","title":"Boost properties"},{"location":"boosts/#numeric-boosts","text":"strangeAsteroidPotency : increases the effects of Strange Asteroids. Each unit (1) is equivalent to upgrading a Scanner by one level. Strange Asteroid effects have a base value, and a scaled value that is multiplied by the Strange Asteroid Potency. candyEffectMultiplier : adds multiplier to the candy multiplier. Ex. a value of 0.01 will make each candy grant 2% production. Note that candy is multiplicative with all other calculations. allProductionMultiplier : adds multiplier to the production of all non-energy buildings. Note that there are buildings which are unaffected by production multipliers. asteroidProductionMultiplier : adds multiplier to all resources gained from clicking asteroids. flatEnergy : adds a flat amount of energy. synergyMultiplier : adds a multiplier for the effects of synergies. Ex. a value of 0.5 will make numeric synergies 50% stronger. Chunk quirks are unaffected. candyGainMultiplier : adds a multiplier to the amount of candy you gain upon ascending. offlineProductionMultiplier : adds a multiplier to offline production. Offline production is capped at 100%. Negative offline production does nothing. baseAsteroidValue : adds extra base metal to asteroid production. keyboardStrastMultiplier : adds a multiplier to the chance of Strange Asteroids appearing while mining with the keyboard. activeProductionMultiplier : adds a multiplier to all production while you're not idling. You're considered idle if you haven't made any input outside of moving the mouse in the last few minutes, modifiable with the idlingMinutesThreshold boost. xpScannerScaling : adds a multiplier to XP production for each level of the Scanner building that you have. buildingCostsRefund : refunds a percentage of the metal spent on a building (including its level upgrades) when you demolish it. Capped at 100% of the metal spent. strastChanceMultiplier : adds a multiplier to the chance of Strange Asteroids appearing. baseStrastChance : adds to the base chance of a Strange Asteroid appearing. The base chance is 1% (0.01) in the vanilla campaign (set in the default boost ). productionMultiplierPerUniqueBuilding : adds a multiplier to all production for each unique building type currently owned. allProductionPerStrast : adds a multiplier to all production for each Strange Asteroid destroyed (total), up to a cap defined of +100%. lunchboxDoublingChance : adds a chance to gain 2x lunchboxes from a conquest. allProductionPerNode : adds a multiplier to all production for each galaxy map node conquered in the current ascension. strastCooldownFlatReduction : reduces the \"cooldown\" of Strange Asteroids by a flat amount of seconds. For each Strange Asteroid clicked, the chance of finding additional ones is reduced for a certain amount of seconds, with the penalty scaling down linearly as the cooldown approaches 0. idleProductionMultiplier : adds a multiplier to all production while you're idling. productionOnMissedStrast : gives X seconds of resource production whenever a Strange Asteroid despawns without having been collected. allBuildingsOwnedProduction : adds a multiplier to all production if you own every type of building. Does not exclude buildings you currently cannot obtain. obstacleSpawnMultiplier : adds a multiplier to the amount of obstacles that spawn in each chunk. randomUnavailableBuildingsCount : makes a certain amount of buildings unavailable to be built in the next ascension. Cannot affect buildings marked as \"essential\" (see the essentialBuildings boost). chunkQuirkMultiplier : adds a multiplier to the effect of quantifiable chunk quirks. startingUpgrades : causes you to start the next ascension with a number of randomly picked upgrades already unlocked, from upgrades that you owned in the previous ascension. Ascension, multi-choice, guild and league upgrades are excluded. keepUpgrades : allows you to pick a number of owned upgrades to keep for the next ascension. Multi-choice, league and guild upgrades are excluded. lunchboxT1Chance : adds a chance for Basic-tier 1 recipe foods to appear in lunchboxes. lunchboxT2Chance : adds a chance for Advanced-tier recipe foods to appear in lunchboxes. lunchboxT3Chance : adds a chance for Gourmet-tier recipe foods to appear in lunchboxes. spawnBudget : adds to the \"point budget\" of spawning enemies in fights. A higher budget means more enemies per fight. Stronger enemies cost more points to spawn. This also works on pre-defined encounters, by placing random enemies from the faction of the last ship to have been spawned from the encounter. Capped at +14. strastEffectDurationMultiplier : adds a multiplier to the duration of Strange Asteroid effects. resourceConversion : increases the exchange rate for converting fuel to experience at the Administrative Chamber - a feature unlocked if the player's total boost has this boost above 0. 0.5 equals +50% exchange rate. defaultEnergyRequirement : the base amount of energy required for optimal production. Ex. setting this to 10 will require the player to have 10 more energy for buildings to stay at 100% efficiency. defaultEnergy : the base amount of energy the player gets, which is unaffected by other multipliers. In the vanilla campaign, this is set to 1 in the default boost . strangeAsteroidChanceCooldown : the pseudo-cooldown between strange asteroids appearing. After activating a strange asteroids, the chance to find the next one scales linearly from 0 to your regular chance as this cooldown ticks down. This penalty is stackable. guild1Perk : affects the strength of the Scavenger guild's perk. guild2Perk : affects the strength of the Scientist guild's perk. guild3Perk : affects the strength of the Trader guild's perk. idlingMinutesThreshold : affects the time (in minutes) inactivity requirement for the game to consider the player to be idling. energyFormulaLeniency : affects the formula for production efficiency from energy. Higher numbers cause it to switch to a harsher curve later. healthpackConstant : the multiplier for healing received from healing packs.","title":"Numeric boosts"},{"location":"boosts/#shipcombat-boosts","text":"combatExperienceMultiplier : adds multiplier for the experience gained after winning a space fight. shipDamageMultiplier : damage multiplier for all player ships. shipHealingMultiplier : multiplier for all healing received by player ships from abilities . Does not affect health packs. shipHealthMultiplier : multiplier for the maximum health of all player ships. shipFullHpDamageMultiplier : increases damage dealt by player ships at 100% HP. shipDodgeChance : adds a chance for incoming damage to be negated. shipScenarioHealing : heals a % of each ship's health upon winning a fight. lowHpDR : adds incoming damage reduction to ships below 25% health. shipDamageBoostOnAllyDeath : adds a multiplier to player ship damage when an allied, non-summon ship dies, until the end of the expedition. shipHealthMultiplierPerUniqueShip : adds a multiplier to ship maximum health based on the amount of unique ship types in the fleet upon starting an expedition, until the end of it. shipRegularResistance : adds a % of \"regular-type\" incoming damage that is resisted. healthpackHealing : adds a multiplier to the healing received from health packs. randomUnavailableShipsCount : makes a certain amount of purchasable ships unavailable to be bought in the next ascension. The starting ship cannot be affected by this. healthpackIntervalMultiplier : adds a multiplier to the cooldown between health packs spawning. galaxyMapInfluence : adds a flat amount of \"influence\" to the current galaxy map. Influence is normally gained after each conquered node, and is used to scale enemy level. fleetCooldown : increases the cooldown for deploying ships. fleetSize : increases the amount of ships you can deploy in a fleet. Does not support negative values!","title":"Ship/combat boosts"},{"location":"boosts/#discounts","text":"Discount boosts are additive with each other and a flat %, with the exception of the building discount, which follows a diminishing returns formula. differentGuildDiscount : adds a discount to guild-exclusive upgrades, if the upgrade's associated guild is different from the one you were in the previous ascension. previousUpgradesDiscount : adds a discount to upgrades that have been bought in previous ascensions. buildingCostsReduction : adds a (buildingCostsReduction / (buildingCostsReduction + 1)) discount to the price of building buildings.","title":"Discounts"},{"location":"boosts/#flags","text":"idleStrastBoost : increases the chance of finding Strange Asteroids, if you haven't collected one in over 15 minutes. Scales over the spawn of 20 minutes, up to a 2.5x chance multiplier. keyboardClicking : allows you to collect asteroids on-screen by jamming on your keyboard. Applies a penalty to Strange Asteroid chance while in use (see the keyboardStrastMultiplier boost). cookingTier1 : allows you to cook Basic-tier recipes. cookingTier2 : allows you to cook Advanced-tier recipes. cookingTier3 : allows you to cook Gourmet-tier recipes. synergiesTier1 : enables Basic-tier synergies. synergiesTier2 : enables Advanced-tier synergies. synergiesTier3 : enables Legendary-tier synergies. flurryClicking : allows you to click to fire additional bullets when using Flurry-type abilities. ascension : enables the Ascension button. chunkQuirks : enables chunk quirks. galaxyMap : enables the Galaxy map button, and deploying fleets. combatAbilities : enables combat abilities for your ships. combatExperienceScaling : multiplies XP gained from combat based on your achievement completion. Having X% of all achievements unlocked equals an X% increase in XP gained. lunchboxes : enables getting lunchboxes from conquests. endlessCombat : enables fighting in the space wilderness. showLunchboxHint : does nothing. Used by lunchboxes to display a \"Click to open\" hint. headstart : causes the closest connected node to the galaxy map's starting point to start nearly-fully conquered (with only one fight remaining). strastLunchbox : causes you to gain a lunchbox when you activate Strange Asteroids while already under the effect of another. buyAllUpgrades : enables the \"buy all upgrades from this tier\" button in the upgrades menu. multiSelect : enables multi-selecting buildings with shift+click. multiCasting : allows you to have all ships of one type fire their abilities at once by shift+clicking the ability. loadouts : enables saving and buying fleet loadouts. galaxyMapQueue : enables you to queue up locations to conquer on the galaxy map by right clicking nodes. If the queue is not empty and you have a loadout save when you lose, you will automatically try to deploy a new fleet of that loadout once the deployment cooldown runs out. autoHealthpacks : enables automatically collecting health packs, right before they would normally despawn.","title":"Flags"},{"location":"boosts/#other-fields","text":"The following boosts use more complex structures; you need to be careful to follow their format. You do not need to include all the sub-properties they have. Unmentioned ones will be set to a default value (almost always 0/false). Most of these are lists, meaning you can stack multiple instances of their effect onto a single boost. This is useful in case you want to, for example, create an upgrade that increases both metal and experience production, by different amounts.","title":"Other fields"},{"location":"boosts/#resourceproductionboosts","text":"A list of boosts which modify the production of a specific resource. Example: increases experience production by 100%, +1% per achievement unlocked, +5% per synergy active, +5% per building owned, +2% per food cooked, and +1% for each click in the last minute. \"resourceProductionBoosts\": [ { \"resourceId\": 1, \"multiplier\": 1, \"multiplierPerAchievement\": 0.01, \"multiplierPerSynergy\": 0.05, \"multiplierPerBuilding\": 0.05, \"multiplierPerFoodCookedTotal\": 0.02, \"multiplierPerClick\": 0.01 } ], Properties: resourceId : number, the ID of the resource to apply the effects to. See resources enumeration multiplier : number, an unconditional multiplier for the resource's production. multiplierPerAchievement : number, adds a multiplier to the resource's production for each achievement level owned. multiplierPerSynergy : number, adds a multiplier for each synergy active. multiplierPerBuildings : number, adds a multiplier for each building owned. multiplierPerFoodCooked : number, adds a multiplier for each food item cooked in the current Ascension. multiplierPerFoodCookedTotal : number, adds a multiplier for each food item cooked across all Ascensions. multiplierPerClick : number, adds a multiplier for each asteroid click in the last minute.","title":"resourceProductionBoosts"},{"location":"boosts/#multiplicativeresourceproductionboosts","text":"Similar to a ResourceProductionBoost , but increases production multiplicatively instead of adding to an existing multiplier. Example: Doubles metal production and halves experience production. \"multiplicativeResourceProductionBoosts\": [ {\"resource\": 0, \"multiplicativeBoost\": 2}, {\"resource\": 1, \"multiplicativeBoost\": 0.5}, ], Properties: resourceId : number, the ID of the resource to apply the effects to. See resources enumeration multiplicativeBoost : number, the multiplier. Ex. '2' equals 2x.","title":"multiplicativeResourceProductionBoosts"},{"location":"boosts/#multiplicativeallproductionboosts","text":"Similar to multiplicativeResourceProductionBoosts , but affects \"all production\". That is, all resource production except candy and energy. Example: Halves all resource production. \"multiplicativeAllProductionBoosts\": [ {\"multiplicativeBoost\": 0.5} ], Properties: multiplicativeBoost : number, the multiplier. '2' equals 2x.","title":"multiplicativeAllProductionBoosts"},{"location":"boosts/#buildingproductionboosts","text":"A list of boosts to specific buildings. Example: Increases Metal Mine's base production by 1 metal, reduces energy consumption by 50% and multiplies their overall production by 2x. \"buildingProductionBoosts\": [ { \"buildingId\": \"metal_mine\", \"baseProduction\": 1.0, \"multiplier\": 0.0, \"energyConsumptionMutliplier\": -0.5, \"multiplicativeBoost\": 2.0 } ], Properties: buildingId : string, the ID of the building to apply the effects to. Leave as \"\" to affect all buildings. See building types . affectAll : boolean, same effect as setting buildingId to an empty string. baseProduction : number, increases the base resource production of the building by a flat amount. multiplier : number, adds to the multiplier of the building's production. energyConsumptionMultiplier : number, adds to the multiplier for the building's energy consumption. Ex. 0.5 makes the build use up 50% more energy. extraBuildingLimit : number, increases the building's building placement limit, if it has one set.","title":"buildingProductionBoosts"},{"location":"boosts/#shipboosts","text":"A list of boosts to specific player ships. Example: Gives the Wasp 100% more health (additive, as is the case with all boosts unless otherwise specified) and makes its active ability shoot 2 more bullets. \"shipBoosts\": [ { \"shipId\": \"wasp\", \"healthMultiplier\": 1.0, \"abilityShotgunBullets\": 2 } ], Properties: shipId : string, the ID of the ship this effect applies to. See ship types . Needs to be prefixed with your mod ID and an underscore to reference your custom ships. affectAllShips : boolean, if true, this set of boosts will apply to all ships. healthMultiplier : number, adds to the multiplier of the ship's maximum health. damageMultiplier : number, adds to the multiplier of the ship's damage. abilityShotgunBullets : integer, adds an amount of extra bullets fired for Shotgun-type abilities. abilityExplosionRadiusBoost : number, increases the radius of AoE attacks. abilityShotgunAngle : number, increases the firing angle of Shotgun-type abilities. accurate : boolean, if true, the ship will never fail accuracy checks*. healingDoT : number, heals the ship by a percentage of its health every 5 seconds. critChance : number, adds a chance to deal critical hits with attacks. Critical hits get a multiplier applied to them, 3x by default. fleetUniqueHealthMultiplier : number, adds to the ship's health multiplier for each unique ship type in the fleet at the start of an expedition. fleetUniqueDamageMultiplier : number, adds to the ship's damage multiplier for each unique ship type in the fleet at the start of an expedition. dodgeAtFullHealth : number, adds dodge chance when the ship is at full health. Dodging an attack completely negates its damage and any other effects of the hit. cooldownPercentageReduction : number, reduces the cooldown of active abilities by a percentage. volatileDamageForQuickFight : number, adds to the ship's damage multiplier if the previous fight was completed in less than 10 seconds. Does not stack, and is removed after a battle that did not meet the criteria. comebackChance : number, adds a chance for the ship to be healed to full health instead of dying, once per expedition. healingOnAbility : number, heals ships that use their active ability for a fraction of their maximum health. damageMultiplierPerEnemy : number, adds to the ship's damage multiplier for each enemy present at the start of a fight. *Abilities that are marked as \"homing\" have a chance to not home into the target and instead deviate by a few degrees. This chance is determined by the speed of the attacker and the target. Slower ships have a lesser chance to fire homing projectiles onto faster ships.","title":"shipBoosts"},{"location":"boosts/#shipmultiplicativehealthboosts-and-shipmultiplicativedamageboosts","text":"Multiplies a ship's maximum health and damage respectively. Example: doubles health of all player ships, and halves the damage of wasps. \"shipMultiplicativeHealthBoosts\": [{\"shipId\": \"\", \"multiplicativeBoost\": 2}], \"shipMultiplicativeDamageBoosts\": [{\"shipId\": \"wasp\", \"multiplicativeBoost\": 0.5}], Properties: shipId : string, the ID of the ship to affect. Needs to be prefixed with your mod ID and an underscore to reference your custom ships. If empty, will affect all ships. multiplicativeBoost : number, the multiplier.","title":"shipMultiplicativeHealthBoosts and shipMultiplicativeDamageBoosts"},{"location":"boosts/#buildingunlocks","text":"A list of buildings that the boost unlocks for construction. See building types . Example: Unlocks the Metal Mine and Academy buildings. \"buildingUnlocks\": [\"metal_mine\", \"academy\"],","title":"buildingUnlocks"},{"location":"boosts/#shipunlocks","text":"A list of ships that the boost unlocks for the player. See ship types . Remember that your own ships must be prefixed with your mod ID and an underscore! Example: Unlocks the Tortoise and a custom ship. \"shipUnlocks\": [\"porcupine\", \"pip_example_mod_whale\"],","title":"shipUnlocks"},{"location":"boosts/#strasteffects","text":"A list of Strange Asteroid effects that the boost unlocks. See strast types . Example: unlocks the Gambler's asteroid (the one that randomizes production for X seconds) \"strastEffects\": [\"randomized_production\"],","title":"strastEffects"},{"location":"boosts/#completesynergytierboosts","text":"Adds to the all production multiplier when all synergies of a specified tier are active. See synergy tier IDs . Example: adds 100% all production if all basic synergies are active, and +200% if all advanced synergies are active. \"completeSynergyTierBoosts\": [ {\"tier\": 1, \"multiplier\": 1}, {\"tier\": 2, \"multiplier\": 2} ], Properties: - tier : number, the synergy tier to require. See synergy tier IDs . - multiplier : number, adds to the all production multiplier if all synergies from the tier are active.","title":"completeSynergyTierBoosts"},{"location":"boosts/#playtimeproductionboosts","text":"Adds to the all production multiplier, based on how much time has elapsed since you started your playthrough. Example: adds +1% fuel production for each minute since you started playing, up to +300%. \"playtimeProductionBoosts\": [ { \"resource\": 4, \"increment\": 0.01, \"interval\": 60, \"maximum\": 3 } ],","title":"playtimeProductionBoosts"},{"location":"boosts/#synergyboosts","text":"Makes a specific synergy stronger. Example: makes Tunnel System synergies 100% more powerful. \"synergyBoosts\": [ { \"id\": 0, \"multiplier\": 1 } ], Properties: id : number, the ID of the synergy to affect. See synergy IDs . multiplier : number, adds to the multiplier of the synergy's effect.","title":"synergyBoosts"},{"location":"boosts/#guildboosts","text":"Adds a multiplier to all production for each time you join a specific guild. Example: adds +150% all production for each time you join the Scavenger guild. \"guildBoosts\": [ { \"id\": 0, \"multiplierPerJoin\": 1.5 } ], Properties: - id : number, the ID of the guild to use for the effect. See guild IDs . - multiplierPerJoin : number, adds to the all production multiplier for each time you joined the guild.","title":"guildBoosts"},{"location":"boosts/#leagueboosts","text":"Similar to a GuildBoost , but for leagues! Wow! Example: adds +50% to all production for each time you've joined the Schemist league. \"leagueBoosts\": [ { \"id\": 1, \"multiplierPerJoin\": 0.5 } ], Properties: - id : number, the ID of the league to use for the effect. See league IDs . - multiplierPerJoin : number, adds to the all production multiplier for each time you joined the league.","title":"leagueBoosts"},{"location":"boosts/#strastboosts","text":"Makes a specific Strange Asteroid effect stronger. Example: makes the Gambler's asteroid 100% stronger. \"strastBoosts\": [ { \"stringId\": \"randomized_production\", \"multiplier\": 1 } ], Properties: - stringId : string, the ID of the Strange Asteroid effect to affect. See Strange Asteroid effect IDs . - multiplier : number, adds to the multiplier of the effect's strength. This is a separate multiplier from the scaling gained from Scanner levels.","title":"strastBoosts"},{"location":"boosts/#synergyscalingexclusions","text":"A list of Synergies to exclude from scaling with any boosts that increase their strength. This affects all boosts, not just the one this is included in. Chunk quirks are unaffected. See synergy IDs . Example: makes Unlucky Luck, Spectroscopy and Fractal Matter unable to gain bonuses from boosts that would scale them. \"synergyScalingExclusions\" = [17, 9, 22],","title":"synergyScalingExclusions"},{"location":"boosts/#clickingextraresourceboosts","text":"Increases the resources you gain from clicking asteroids by a percentage of your production per second. Example: makes asteroids give +1% of your Metal production, per Metal Mine built. \"clickingExtraResourceBoosts\": [ { \"id\": 0, \"multiplier\": 0.01, \"buildingAmountScaling\": \"metal_mine\" } ],","title":"clickingExtraResourceBoosts"},{"location":"boosts/#essentialbuildings","text":"A list of buildings that cannot be made unavailable by the randomUnavailableBuildingsCount boost. Example: the vanilla list of essential buildings. \"essentialBuildings\": [\"metal_mine\", \"academy\", \"pumpjack\", \"research_lab\", \"scanner\", \"solar_panel\"],","title":"essentialBuildings"},{"location":"boosts/#delayedcandyboosts","text":"Adds to the multiplier of candy gained upon ascending, for each real-life day elapsed since your last ascension. Example: increases candy gained from ascending by +100% for each day elapsed, up to +200%. \"delayedCandyBoosts\": [ { \"multiplier\": 1, \"daysCap\": 2 } ], Properties: - multiplier : number, the multiplier added for each day elapsed. - daysCap : number, the maxmimum amount of days this effect stacks for.","title":"delayedCandyBoosts"},{"location":"boosts/#previousguildboosts","text":"Adds to the all production multiplier if your previous guild was the one specified. Example: increases all production by 50% if your previous guild was the Scientist guild. \"previousGuildBoosts\": [ {\"id\": 1, \"multiplier\": 0.5} ], Properties: - id : number, the ID of the guild to require. See guild IDs . - multiplier : number, adds to the all production multiplier if your previous guild was the one specified in this effect.","title":"previousGuildBoosts"},{"location":"boosts/#overflowedenergyproductionboosts","text":"Adds to the all production multiplier, scaling with the amount of excess energy that you have (energy over your required amount for optimal building production). Example: adds +1% to all production for each 1 energy over your optimum amount, up to +100%. \"overflowedEnergyProductionBoosts\": [ { \"multiplier\": 0.01, \"additiveCap\": 1 } ], Properties: - multiplier : number, adds to the all production multiplier for each point of excess energy. - additiveCap : number, the cap to the multiplier you can get from this effect.","title":"overflowedEnergyProductionBoosts"},{"location":"boosts/#upgradeunlocks","text":"A list of upgrades to unlock upon the boost being first applied, or upon ascending. Only works as a boost for upgrades, not food items. Used in the vanilla game for the ascension upgrades that make you start with buildings already unlocked, by unlocking their upgrades (so as to hide them from the upgrades screen). To reference your own upgrades, you must prefix them with your mod ID and an underscore. Example: unlocks the upgrade that allows building academies. \"upgradeUnlocks\": [\"academy_unlock\"],","title":"upgradeUnlocks"},{"location":"campaigns/","text":"Campaigns Campaigns (Galaxy maps) are created using an editor within the game itself, accessed from the title screen's \"Campaign Editor\" button. Editor The campaign editor's main screen is simple; you can pan the view with middle-click and select locations (nodes) with left-click. More locations can be added with the button at the top. When a node is selected, you can drag it with left-click to move it around. You can middle-click other nodes to connect them together. You will also get a panel on the left side where you can edit the node: You can edit the name of the location by clicking it. The box below is the description that appears in tooltips. Faction determines the enemies that will spawn in fights on that node, for randomly-generated fights. The type dropdown determines the sprite set for the location. You can change the icon from the \"Sprite\" button. The rewards button takes you to a menu where you can set the rewards for conquering the location: ship unlocks, chunks, extra fleet size, lunchboxes, production boosts or any non-Ascension upgrade. The \"Set as start\" button is used to set the starting point of the Galaxy map - the location that is conquered by default. The fights button leads to a menu where you can customize the combats of the node. \"Level scaling\" determines how many levels enemies get after each fight. \"Fights\" is the total amount of combats the player needs to win to conquer the node. \"Extra enemy spawning point budget\" increases the amount of random enemies per fight. Enemies in fights are randomly picked by default, but you manually create encounters with the \"Add\" button at the bottom. This takes you to a menu where you can add enemies from a dropdown. The number field on the left of each custom fight is the index (starting from 0) of the fight that the encounter will take place on. Ex. 1 takes place on the second fight at the node. At the top of the screen you can access a page with numerous options affecting the whole campaign, such as the starting ship and some constants for formulas. You can also choose to make upgrades unavailable for purchase; this is useful if you want to make an upgrade be obtainable only from conquest, or not at all. Custom Ascension Tree You can create custom Ascension trees for campaigns; see the Ascension page. Default Boost When the game calculates the player's total boosts , it does so starting with a \"default boost\" to which all others are summed up. You can define a custom default boost for your campaign to modify the player's starting stats and unlocked features by creating a Json file with the same filename as the campaign, but .defaultboost as the extension. This file should otherwise follow the boost format. This boost does not use values from the vanilla one for unspecified fields, meaning that there are some important fields that you should not forget to define, such as buildingUnlocks and baseStrastChance - else the player will not be able to build anything nor find any Strange Asteroids! Example: makes the player start with +100% Metal production, the same 3 unlocked buildings as in vanilla, 1% base Strange Asteroid chance, as well as all cooking tiers and keyboard mining unlocked. { \"resourceProductionBoosts\": [ { \"resourceId\": 0, \"multiplier\": 1 } ], \"buildingUnlocks\": [\"metal_mine\", \"research_lab\", \"solar_panel\"], \"baseStrastChance\": 0.01, \"cookingTier1\": true, \"cookingTier2\": true, \"cookingTier3\": true, \"keyboardClicking\": true } This is the default boost from the vanilla campaign: { \"buildingUnlocks\": [\"metal_mine\", \"solar_panel\", \"research_lab\"], \"strastEffects\": [\"metal_instant\", \"candy_effect_boost\", \"fuel_production\", \"asteroid_boost\"], \"synergyScalingExclusions\": [17, 9, 22], \"essentialBuildings\": [\"metal_mine\", \"academy\", \"pumpjack\", \"research_lab\", \"scanner\", \"solar_panel\"], \"baseStrastChance\": 0.01, \"strangeAsteroidChanceCooldown\": 390, \"guild1Perk\": 0.01, \"guild2Perk\": 0.005, \"guild3Perk\": 1.25, \"idlingMinutesThreshold\": 7, \"energyFormulaLeniency\": 0.15, \"healthpackConstant\": 2.5 }","title":"Campaigns"},{"location":"campaigns/#campaigns","text":"Campaigns (Galaxy maps) are created using an editor within the game itself, accessed from the title screen's \"Campaign Editor\" button.","title":"Campaigns"},{"location":"campaigns/#editor","text":"The campaign editor's main screen is simple; you can pan the view with middle-click and select locations (nodes) with left-click. More locations can be added with the button at the top. When a node is selected, you can drag it with left-click to move it around. You can middle-click other nodes to connect them together. You will also get a panel on the left side where you can edit the node: You can edit the name of the location by clicking it. The box below is the description that appears in tooltips. Faction determines the enemies that will spawn in fights on that node, for randomly-generated fights. The type dropdown determines the sprite set for the location. You can change the icon from the \"Sprite\" button. The rewards button takes you to a menu where you can set the rewards for conquering the location: ship unlocks, chunks, extra fleet size, lunchboxes, production boosts or any non-Ascension upgrade. The \"Set as start\" button is used to set the starting point of the Galaxy map - the location that is conquered by default. The fights button leads to a menu where you can customize the combats of the node. \"Level scaling\" determines how many levels enemies get after each fight. \"Fights\" is the total amount of combats the player needs to win to conquer the node. \"Extra enemy spawning point budget\" increases the amount of random enemies per fight. Enemies in fights are randomly picked by default, but you manually create encounters with the \"Add\" button at the bottom. This takes you to a menu where you can add enemies from a dropdown. The number field on the left of each custom fight is the index (starting from 0) of the fight that the encounter will take place on. Ex. 1 takes place on the second fight at the node. At the top of the screen you can access a page with numerous options affecting the whole campaign, such as the starting ship and some constants for formulas. You can also choose to make upgrades unavailable for purchase; this is useful if you want to make an upgrade be obtainable only from conquest, or not at all.","title":"Editor"},{"location":"campaigns/#custom-ascension-tree","text":"You can create custom Ascension trees for campaigns; see the Ascension page.","title":"Custom Ascension Tree"},{"location":"campaigns/#default-boost","text":"When the game calculates the player's total boosts , it does so starting with a \"default boost\" to which all others are summed up. You can define a custom default boost for your campaign to modify the player's starting stats and unlocked features by creating a Json file with the same filename as the campaign, but .defaultboost as the extension. This file should otherwise follow the boost format. This boost does not use values from the vanilla one for unspecified fields, meaning that there are some important fields that you should not forget to define, such as buildingUnlocks and baseStrastChance - else the player will not be able to build anything nor find any Strange Asteroids! Example: makes the player start with +100% Metal production, the same 3 unlocked buildings as in vanilla, 1% base Strange Asteroid chance, as well as all cooking tiers and keyboard mining unlocked. { \"resourceProductionBoosts\": [ { \"resourceId\": 0, \"multiplier\": 1 } ], \"buildingUnlocks\": [\"metal_mine\", \"research_lab\", \"solar_panel\"], \"baseStrastChance\": 0.01, \"cookingTier1\": true, \"cookingTier2\": true, \"cookingTier3\": true, \"keyboardClicking\": true } This is the default boost from the vanilla campaign: { \"buildingUnlocks\": [\"metal_mine\", \"solar_panel\", \"research_lab\"], \"strastEffects\": [\"metal_instant\", \"candy_effect_boost\", \"fuel_production\", \"asteroid_boost\"], \"synergyScalingExclusions\": [17, 9, 22], \"essentialBuildings\": [\"metal_mine\", \"academy\", \"pumpjack\", \"research_lab\", \"scanner\", \"solar_panel\"], \"baseStrastChance\": 0.01, \"strangeAsteroidChanceCooldown\": 390, \"guild1Perk\": 0.01, \"guild2Perk\": 0.005, \"guild3Perk\": 1.25, \"idlingMinutesThreshold\": 7, \"energyFormulaLeniency\": 0.15, \"healthpackConstant\": 2.5 }","title":"Default Boost"},{"location":"custom-text/","text":"Custom Text Many modded items have fields for in-game names and descriptions; these fields use keys, which point to the actual text in files in the Language folder. For now, only one language is supported ( en.xml ), thus all your strings should go there. The format is the following: <lang> <lines area=\"myarea\"> <line key=\"upgrade.test_upgrade_1\">Modded Upgrade</line> <line key=\"upgrade.test_upgrade_1.flavor\">this really do be the customized lifestyle</line> </lines> </lang> The areas are for organization only, they have no special meaning nor should they be referenced anywhere. What matters are the <line> elements, each of them holding one string. The example is used for the upgrade in the example mod. Most items only have one text field (the name), with the description and flavour text being that same key suffixed with .desc and .flavour respectively. Note that upgrades and food generate their descriptions automatically from their boost by default. If you include a .desc key for them, the string will be used instead of the boost description. Ability Parameters The descriptions for abilities support formatting the string with values from the ability itself. For example, {cooldown} in the text is replaced with the ability's cooldown property. Supported properties: {cooldown} : cooldown {charges} : charges {duration} : duration {statuseffectduration} : the duration of the first status effect the ability applies. {fractionhealing} : fractionHealing , only for healing -type abilities {spreadangle} : spreadAngle , only for shotgun -type abilities {bulletamount} : bulletAmount , only for shotgun -type abilities {maxSummons} : maxSummons , only for summon -type abilities {summonedship} : the name of the summoned ship for summon -type abilities For bulletDetonation -type abilities, you can prefix these with boundability. (ex. {boundability.cooldown} ) to pull properties from the bound ability instead.","title":"Text"},{"location":"custom-text/#custom-text","text":"Many modded items have fields for in-game names and descriptions; these fields use keys, which point to the actual text in files in the Language folder. For now, only one language is supported ( en.xml ), thus all your strings should go there. The format is the following: <lang> <lines area=\"myarea\"> <line key=\"upgrade.test_upgrade_1\">Modded Upgrade</line> <line key=\"upgrade.test_upgrade_1.flavor\">this really do be the customized lifestyle</line> </lines> </lang> The areas are for organization only, they have no special meaning nor should they be referenced anywhere. What matters are the <line> elements, each of them holding one string. The example is used for the upgrade in the example mod. Most items only have one text field (the name), with the description and flavour text being that same key suffixed with .desc and .flavour respectively. Note that upgrades and food generate their descriptions automatically from their boost by default. If you include a .desc key for them, the string will be used instead of the boost description.","title":"Custom Text"},{"location":"custom-text/#ability-parameters","text":"The descriptions for abilities support formatting the string with values from the ability itself. For example, {cooldown} in the text is replaced with the ability's cooldown property. Supported properties: {cooldown} : cooldown {charges} : charges {duration} : duration {statuseffectduration} : the duration of the first status effect the ability applies. {fractionhealing} : fractionHealing , only for healing -type abilities {spreadangle} : spreadAngle , only for shotgun -type abilities {bulletamount} : bulletAmount , only for shotgun -type abilities {maxSummons} : maxSummons , only for summon -type abilities {summonedship} : the name of the summoned ship for summon -type abilities For bulletDetonation -type abilities, you can prefix these with boundability. (ex. {boundability.cooldown} ) to pull properties from the bound ability instead.","title":"Ability Parameters"},{"location":"deprecated/","text":"If you've found this page, it means you are worthy of reading up about juicy functionality that never quite saw the light of the day. Below are numerous moddable properties that are unused by the game, most having been scrapped sometime during development. I chose not to make them inaccessible in modding, however, their use is discouraged as most of them likely are no longer functional and may have adverse effects (read: crashing or scripting failures). This page mainly serves as an easter egg, and a tribute to tcrf.net. Boosts multipleCombats : flag, allows you to deploy multiple fleets at once, to different locations. Scrapped somewhat in the middle of the game's development as there was little reason for the player to be able to do this, and would've caused balancing headaches to the lead designer. Likely does not function properly ever since the fleet cooldown was added. The area in the bottom left of the screen would have one button per fight active, and the \"minimap\" would allow for switching between them, as well as buttons on the fight interface itself. Ships isPlayerShip : boolean, determines if the ship is an ally or an enemy. Defaults to true. All enemy ships have this at false, and it's what determines their alignment. Since you currently cannot mod in new enemies, this property is not shown on the ships page. faction : numeric, from 0 to 4. Determines which faction the ship belongs to (player, angel, insectoid, dpf or warden). Not mentioned for the same reason as above. isBoss : boolean, makes the ship a valid enemy to spawn in \"boss fights\" (last fight of each node, every 20 nodes in endless) spawningValue : number, how many 'spawning credits' this ship costs as an enemy. A combat scenario with a budget of 3 points could spawn a ship with a spawningValue of 0.5 6 times. onDeathAbility : string, the ability the ship casts when it dies. Can only be a SummonSuicide -type ability, with the ship being the one to suicide, not the summons. Used by the Swarm enemies. Not mentioned in the regular docs as its functionality was not quite versatile enough. Abilities isPassive : makes an ability never usable. needsTarget : boolean, if true the ability will not be usable if there's no valid target. Used by the Wolf's active ability. needsMovementTarget : boolean, if true the ability will not be usable unless the caster has an active \"ability target\". Used by the Wolf's active ability.","title":"Deprecated"},{"location":"deprecated/#boosts","text":"multipleCombats : flag, allows you to deploy multiple fleets at once, to different locations. Scrapped somewhat in the middle of the game's development as there was little reason for the player to be able to do this, and would've caused balancing headaches to the lead designer. Likely does not function properly ever since the fleet cooldown was added. The area in the bottom left of the screen would have one button per fight active, and the \"minimap\" would allow for switching between them, as well as buttons on the fight interface itself.","title":"Boosts"},{"location":"deprecated/#ships","text":"isPlayerShip : boolean, determines if the ship is an ally or an enemy. Defaults to true. All enemy ships have this at false, and it's what determines their alignment. Since you currently cannot mod in new enemies, this property is not shown on the ships page. faction : numeric, from 0 to 4. Determines which faction the ship belongs to (player, angel, insectoid, dpf or warden). Not mentioned for the same reason as above. isBoss : boolean, makes the ship a valid enemy to spawn in \"boss fights\" (last fight of each node, every 20 nodes in endless) spawningValue : number, how many 'spawning credits' this ship costs as an enemy. A combat scenario with a budget of 3 points could spawn a ship with a spawningValue of 0.5 6 times. onDeathAbility : string, the ability the ship casts when it dies. Can only be a SummonSuicide -type ability, with the ship being the one to suicide, not the summons. Used by the Swarm enemies. Not mentioned in the regular docs as its functionality was not quite versatile enough.","title":"Ships"},{"location":"deprecated/#abilities","text":"isPassive : makes an ability never usable. needsTarget : boolean, if true the ability will not be usable if there's no valid target. Used by the Wolf's active ability. needsMovementTarget : boolean, if true the ability will not be usable unless the caster has an active \"ability target\". Used by the Wolf's active ability.","title":"Abilities"},{"location":"enums/","text":"Enums This page lists IDs commonly used throughout multiple types of modded content. Resources 0 : Metal 1 : Experience 2 : Candy* 3 : Energy** 4 : Fuel *Likely does not work properly when used as a cost outside of Ascension upgrades. **If used for an upgrade's cost, the game will check if you have enough energy over your amount needed for optimal production to determine if the upgrade is affordable. Under no situation is energy actually deducted. For upgrading buildings, the energy \"cost\" is purely decorative and does not ever stop you from levelling up the building. Buildings metal_mine solar_panel academy research_lab pumpjack (Fuel Pump) admin_chamber replicator asteroid_harvester fusion_reactor hydrogen_generator admin_chamber particle_generator scanner kitchen Ships Player ships: wasp , manta (Tortoise*), tortoise (Actually the Plover*), mothership , porcupine , figher (Gecko), mothership_drone (Summon), cargo , salamander , wolf Angel ships: angel , angelic_seraphim (Boss), angel_archangel , angel_cherub , DPF ships: dpf_torturer , dpf_leviathan (Boss), dpf_grunt , dpf_ally , dpf_decoy , dpf_decoymaster , Warden ships: warden_justiciar (Boss), warden_enforcer , warden_bulwark , warden_atonement Insectoid ships: insectoid , insectoid_crab (Boss), insectoid_swarmer , insectoid_follower , insectoid_burster *Yes this is just as confusing to us as is it to you Strange Asteroid Effects metal_instant (Metallic Asteroid) candy_effect_boost (Saccharine Asteroid) fuel_production (Organic Asteroid) asteroid_boost (Calamitous Asteroid) energy_overflow_production (Sparkling Asteroid) all_production_per_upgrade (Researcher's Asteroid) metal_clicking_frenzy (Momentum Asteroid) xp_production_per_energy (Electron Asteroid) all_production (Effulgent Asteroid) randomized_production (Gambler's Asteroid) free_building (Philosopher's Asteroid) metal_production (Magnetic Asteroid) all_production_per_ascension (Reincarnation Asteroid) Synergies 0 : Tunnel System 1 : Efficient Grid 2 : Sunglight Access 3 : Forbidden Knowledge 4 : No Competition 5 : Reduced Blackouts 6 : Nuclear Physics 7 : Fracking 8 : Territorial Harvesting 9 : Spectroscopy 10 : Laser Drills 11 : Solar Extraction 12 : OCD 13 : Debris Mining 14 : Photochemistry 15 : Fuel Generating 16 : Hydrogen Pumping 17 : Unlucky Luck 18 : Recurrent Extraction 19 : Undisturbed Research 20 : Synchronized Production 21 : Management 22 : Fractal Matter 23 : O'xelg Chunk Synergy 24 : Desert Chunk Synergy 25 : Island Chunk Synergy 26 : Dark Chunk Synergy 27 : Insectoid Chunk Synergy Synergy Tiers 1 : Basic 2 : Advanced 3 : Legendary 4 : Chunk synergies Guilds 0 : Scavenger 1 : Scientist 2 : Trader Leagues 0 : Ruffian 1 : Schemist 2 : Sentinel Damage Types 0 : Normal 1 : Healing 2 : Unresistable Sounds 0 : \"Cannon turret\" 1 : \"Blaster laser\", 2 : \"Deep blaster\", 3 : \"Pistol shot\", 4 : \"Rifle bolt\", 5 : \"Medium rifle\", 6 : \"Large rifle\", 7 : \"Laser rifle\", 8 : \"Cannon shot\", 9 : \"Magic climbing bells\", 10 : \"Magic fast bolt\", 11 : \"Magic fast burst\", 12 : \"Magic fire robotic\", 13 : \"Magic flame\", 14 : \"Magic power\", 15 : \"Magic shield\", 16 : \"Far-away explosion\", 17 : \"Large explosion\", 18 : \"Small explosion\", 19 : \"Sci-fi explosion\",","title":"Enums"},{"location":"enums/#enums","text":"This page lists IDs commonly used throughout multiple types of modded content.","title":"Enums"},{"location":"enums/#resources","text":"0 : Metal 1 : Experience 2 : Candy* 3 : Energy** 4 : Fuel *Likely does not work properly when used as a cost outside of Ascension upgrades. **If used for an upgrade's cost, the game will check if you have enough energy over your amount needed for optimal production to determine if the upgrade is affordable. Under no situation is energy actually deducted. For upgrading buildings, the energy \"cost\" is purely decorative and does not ever stop you from levelling up the building.","title":"Resources"},{"location":"enums/#buildings","text":"metal_mine solar_panel academy research_lab pumpjack (Fuel Pump) admin_chamber replicator asteroid_harvester fusion_reactor hydrogen_generator admin_chamber particle_generator scanner kitchen","title":"Buildings"},{"location":"enums/#ships","text":"Player ships: wasp , manta (Tortoise*), tortoise (Actually the Plover*), mothership , porcupine , figher (Gecko), mothership_drone (Summon), cargo , salamander , wolf Angel ships: angel , angelic_seraphim (Boss), angel_archangel , angel_cherub , DPF ships: dpf_torturer , dpf_leviathan (Boss), dpf_grunt , dpf_ally , dpf_decoy , dpf_decoymaster , Warden ships: warden_justiciar (Boss), warden_enforcer , warden_bulwark , warden_atonement Insectoid ships: insectoid , insectoid_crab (Boss), insectoid_swarmer , insectoid_follower , insectoid_burster *Yes this is just as confusing to us as is it to you","title":"Ships"},{"location":"enums/#strange-asteroid-effects","text":"metal_instant (Metallic Asteroid) candy_effect_boost (Saccharine Asteroid) fuel_production (Organic Asteroid) asteroid_boost (Calamitous Asteroid) energy_overflow_production (Sparkling Asteroid) all_production_per_upgrade (Researcher's Asteroid) metal_clicking_frenzy (Momentum Asteroid) xp_production_per_energy (Electron Asteroid) all_production (Effulgent Asteroid) randomized_production (Gambler's Asteroid) free_building (Philosopher's Asteroid) metal_production (Magnetic Asteroid) all_production_per_ascension (Reincarnation Asteroid)","title":"Strange Asteroid Effects"},{"location":"enums/#synergies","text":"0 : Tunnel System 1 : Efficient Grid 2 : Sunglight Access 3 : Forbidden Knowledge 4 : No Competition 5 : Reduced Blackouts 6 : Nuclear Physics 7 : Fracking 8 : Territorial Harvesting 9 : Spectroscopy 10 : Laser Drills 11 : Solar Extraction 12 : OCD 13 : Debris Mining 14 : Photochemistry 15 : Fuel Generating 16 : Hydrogen Pumping 17 : Unlucky Luck 18 : Recurrent Extraction 19 : Undisturbed Research 20 : Synchronized Production 21 : Management 22 : Fractal Matter 23 : O'xelg Chunk Synergy 24 : Desert Chunk Synergy 25 : Island Chunk Synergy 26 : Dark Chunk Synergy 27 : Insectoid Chunk Synergy","title":"Synergies"},{"location":"enums/#synergy-tiers","text":"1 : Basic 2 : Advanced 3 : Legendary 4 : Chunk synergies","title":"Synergy Tiers"},{"location":"enums/#guilds","text":"0 : Scavenger 1 : Scientist 2 : Trader","title":"Guilds"},{"location":"enums/#leagues","text":"0 : Ruffian 1 : Schemist 2 : Sentinel","title":"Leagues"},{"location":"enums/#damage-types","text":"0 : Normal 1 : Healing 2 : Unresistable","title":"Damage Types"},{"location":"enums/#sounds","text":"0 : \"Cannon turret\" 1 : \"Blaster laser\", 2 : \"Deep blaster\", 3 : \"Pistol shot\", 4 : \"Rifle bolt\", 5 : \"Medium rifle\", 6 : \"Large rifle\", 7 : \"Laser rifle\", 8 : \"Cannon shot\", 9 : \"Magic climbing bells\", 10 : \"Magic fast bolt\", 11 : \"Magic fast burst\", 12 : \"Magic fire robotic\", 13 : \"Magic flame\", 14 : \"Magic power\", 15 : \"Magic shield\", 16 : \"Far-away explosion\", 17 : \"Large explosion\", 18 : \"Small explosion\", 19 : \"Sci-fi explosion\",","title":"Sounds"},{"location":"food/","text":"Food Food items are created in the Food folder. Example A food item with a ridiculously high probability of appearing in lunchboxes. { \"stringId\": \"test_food\", \"boostId\": \"test_upgrade_boost\", \"localizationString\": \"test_food\", \"lunchboxWeight\": 10000 } Properties Like with all other content, food items must have, at the very least, a stringId property with a unique internal name for the food. The boostId field should be the ID of the boost the food will grant. For foods, the boost is awarded as many times as the amount of the food that the player owns, meaning they are stackable. Other properties: sprite : string, filename (without extension) of the icon to use for the food, pulled from the Sprites folder. localizationString : string, the text key for the item's name, pulled from the Language folder. The description and flavour text will use this key as well, but suffixed with .desc and .flavour respectively. lunchboxWeight : number, the weighted chance of this food appearing in lunchboxes. Use 0 to prevent it from ever appearing. For vanilla foods, this value is on average 20 . isBasicIngredient : boolean, used for the achievement that requires you to obtain all basic ingredients. isLunchbox : boolean, if true, the food will have the following properties: Owning any amount of it will show a <!> sticker on the cooking menu button The item will not be usable in cooking When clicked, the item will be consumed and the lunchbox interface will appear The item will be awarded from conquests that reward lunchboxes (the game picks one lunchbox-type food at random to give out each conquest)","title":"Food"},{"location":"food/#food","text":"Food items are created in the Food folder.","title":"Food"},{"location":"food/#example","text":"A food item with a ridiculously high probability of appearing in lunchboxes. { \"stringId\": \"test_food\", \"boostId\": \"test_upgrade_boost\", \"localizationString\": \"test_food\", \"lunchboxWeight\": 10000 }","title":"Example"},{"location":"food/#properties","text":"Like with all other content, food items must have, at the very least, a stringId property with a unique internal name for the food. The boostId field should be the ID of the boost the food will grant. For foods, the boost is awarded as many times as the amount of the food that the player owns, meaning they are stackable. Other properties: sprite : string, filename (without extension) of the icon to use for the food, pulled from the Sprites folder. localizationString : string, the text key for the item's name, pulled from the Language folder. The description and flavour text will use this key as well, but suffixed with .desc and .flavour respectively. lunchboxWeight : number, the weighted chance of this food appearing in lunchboxes. Use 0 to prevent it from ever appearing. For vanilla foods, this value is on average 20 . isBasicIngredient : boolean, used for the achievement that requires you to obtain all basic ingredients. isLunchbox : boolean, if true, the food will have the following properties: Owning any amount of it will show a <!> sticker on the cooking menu button The item will not be usable in cooking When clicked, the item will be consumed and the lunchbox interface will appear The item will be awarded from conquests that reward lunchboxes (the game picks one lunchbox-type food at random to give out each conquest)","title":"Properties"},{"location":"recipes/","text":"Recipes Custom cooking recipes go in the Recipes folder. Example This advanced-tier recipe creates the vanilla meat item, with 2 meats and 1 egg, defying the laws of conservation of energy. { \"stringId\": \"test_food\", \"resultId\": \"meat\", \"ingredients\": [\"meat\", \"egg\", \"meat\"], \"tier\": 1 } Properties As with all modded content, the stringId field is essential. Additionally, your recipe must have a resultId , the string ID of the food item it creates. You may use IDs for food items from the base game; see the vanilla IDs section for them. You must also provide a list of the string IDs of the 3 ingredients that the recipe will use. You cannot make recipes that use fewer or more ingredients. Other properties: cookingTime : number, the seconds it takes to cook the recipe. tier : number, the tier of the recipe. Recipes can only be cooked if the player owns a boost that unlocks the respective tier. 0 : basic 1 : advanced 2 : gourmet 3 : hidden; always cookable, but does not appear in the cooking book Vanilla IDs Basic: milk, fruit, butter, egg, flour, meat, sugar, water From basic recipes: pasta, dough, lemonade, ice_cream, cheese, omelette, soup, chocolate, marshmallows, crepes From advanced recipes: bread, milkshake, cake, cookies, cheese_soup, ramen, ice_crepes, pizza, brownies, casserole From gourmet recipes: ice_cream_sandvich, dessert, burger Others: lunchbox, smores, fruit_pizza","title":"Recipes"},{"location":"recipes/#recipes","text":"Custom cooking recipes go in the Recipes folder.","title":"Recipes"},{"location":"recipes/#example","text":"This advanced-tier recipe creates the vanilla meat item, with 2 meats and 1 egg, defying the laws of conservation of energy. { \"stringId\": \"test_food\", \"resultId\": \"meat\", \"ingredients\": [\"meat\", \"egg\", \"meat\"], \"tier\": 1 }","title":"Example"},{"location":"recipes/#properties","text":"As with all modded content, the stringId field is essential. Additionally, your recipe must have a resultId , the string ID of the food item it creates. You may use IDs for food items from the base game; see the vanilla IDs section for them. You must also provide a list of the string IDs of the 3 ingredients that the recipe will use. You cannot make recipes that use fewer or more ingredients. Other properties: cookingTime : number, the seconds it takes to cook the recipe. tier : number, the tier of the recipe. Recipes can only be cooked if the player owns a boost that unlocks the respective tier. 0 : basic 1 : advanced 2 : gourmet 3 : hidden; always cookable, but does not appear in the cooking book","title":"Properties"},{"location":"recipes/#vanilla-ids","text":"Basic: milk, fruit, butter, egg, flour, meat, sugar, water From basic recipes: pasta, dough, lemonade, ice_cream, cheese, omelette, soup, chocolate, marshmallows, crepes From advanced recipes: bread, milkshake, cake, cookies, cheese_soup, ramen, ice_crepes, pizza, brownies, casserole From gourmet recipes: ice_cream_sandvich, dessert, burger Others: lunchbox, smores, fruit_pizza","title":"Vanilla IDs"},{"location":"ships/","text":"Ships Custom ships go in the Ships folder. Example A tanky, slow-moving ship with 2 automatic abilities. { \"stringId\": \"testship\", \"nameKey\": \"ship.example\", \"speed\": 30, \"baseDmg\": 2, \"baseHp\": 80, \"dmgGrowth\": 1, \"hpGrowth\": 20, \"baseCost\": 8000, \"costMultiplier\": 1.03, \"baseUpgradeCost\": 4000, \"upgradeCostMultiplier\": 1.03, \"shopIndex\": 1, \"deathSound\": 19, \"sprite\": \"ship_1.png\", \"automaticAbilities\": [ \"summon_ability\", \"spiral_ability\" ] } Properties As with all modded content, the stringId field is essential. nameKey : string, the text key to use for the name of the ship. The description uses this same key suffixed with .desc . purchasable : boolean, determines if the ship appears in the fleet menu and can be bought. Defaults to true. speed : number, the movement speed of the ship. The Wasp's speed is 180. Defaults to 50. orbitRadius : number, determines how far away from the center of the \"combat ring\" the ship orbits. The Wasp has this set to 120. Default is 100. size : number, determines how many particles to spawn when this ship is destroyed. Defaults to 1. 0 : Small, 2 particles 1 : Medium, 3 particles 2 : Large, 6 particles baseDmg : number, the base damage this ship deals. Defaults to 3 (Wasp's value). baseHp : number, the base HP of the ship. Defaults to 40 (Wasp's value). automaticAbilities : list of string IDs of the abilities the ship will automatically use. Use to define the automatic attack(s). activeAbility : string, the ID of the active ability of the ship - the one used when the player clicks on the ship. shopIndex : number, determines the position of the ship in the fleet shop menu. Lower indexes get placed higher. hpGrowth : number, the amount of HP the ship gains with each level after the first one. dmgGrowth : number, the amount of extra damage the ship gains with each level after the first one. turningSpeed : number, the ship's turning speed in degrees/s while the ship is not moving on the \"combat ring\". Used by the Wolf. baseCost : number, the base metal cost to buy the ship. costMultiplier : number, multiplies base cost for every level after 1. The formula therefore being baseCost * costMultiplier^(level - 1) baseUpgradeCost : number, the base cost of upgrading the ship. upgradeCostMultiplier : number, multiplies the base upgrade cost for every level after 1. The formula is baseUpgradeCost * (upgradeCostMultiplier^(level + 1) / (upgradeCostMultiplier - 1)); sprite : string, the sprite filename for the ship. deathSound : number, sound to play upon the ship's death. See sounds enumeration .","title":"Ships"},{"location":"ships/#ships","text":"Custom ships go in the Ships folder.","title":"Ships"},{"location":"ships/#example","text":"A tanky, slow-moving ship with 2 automatic abilities. { \"stringId\": \"testship\", \"nameKey\": \"ship.example\", \"speed\": 30, \"baseDmg\": 2, \"baseHp\": 80, \"dmgGrowth\": 1, \"hpGrowth\": 20, \"baseCost\": 8000, \"costMultiplier\": 1.03, \"baseUpgradeCost\": 4000, \"upgradeCostMultiplier\": 1.03, \"shopIndex\": 1, \"deathSound\": 19, \"sprite\": \"ship_1.png\", \"automaticAbilities\": [ \"summon_ability\", \"spiral_ability\" ] }","title":"Example"},{"location":"ships/#properties","text":"As with all modded content, the stringId field is essential. nameKey : string, the text key to use for the name of the ship. The description uses this same key suffixed with .desc . purchasable : boolean, determines if the ship appears in the fleet menu and can be bought. Defaults to true. speed : number, the movement speed of the ship. The Wasp's speed is 180. Defaults to 50. orbitRadius : number, determines how far away from the center of the \"combat ring\" the ship orbits. The Wasp has this set to 120. Default is 100. size : number, determines how many particles to spawn when this ship is destroyed. Defaults to 1. 0 : Small, 2 particles 1 : Medium, 3 particles 2 : Large, 6 particles baseDmg : number, the base damage this ship deals. Defaults to 3 (Wasp's value). baseHp : number, the base HP of the ship. Defaults to 40 (Wasp's value). automaticAbilities : list of string IDs of the abilities the ship will automatically use. Use to define the automatic attack(s). activeAbility : string, the ID of the active ability of the ship - the one used when the player clicks on the ship. shopIndex : number, determines the position of the ship in the fleet shop menu. Lower indexes get placed higher. hpGrowth : number, the amount of HP the ship gains with each level after the first one. dmgGrowth : number, the amount of extra damage the ship gains with each level after the first one. turningSpeed : number, the ship's turning speed in degrees/s while the ship is not moving on the \"combat ring\". Used by the Wolf. baseCost : number, the base metal cost to buy the ship. costMultiplier : number, multiplies base cost for every level after 1. The formula therefore being baseCost * costMultiplier^(level - 1) baseUpgradeCost : number, the base cost of upgrading the ship. upgradeCostMultiplier : number, multiplies the base upgrade cost for every level after 1. The formula is baseUpgradeCost * (upgradeCostMultiplier^(level + 1) / (upgradeCostMultiplier - 1)); sprite : string, the sprite filename for the ship. deathSound : number, sound to play upon the ship's death. See sounds enumeration .","title":"Properties"},{"location":"sprites/","text":"Sprites The Sprites folder holds sprites in PNG format. These are used in multiple places, usually in Sprite fields. When you're referencing a sprite, you must include the extension regardless: ... \"Sprite\": \"mysprite.png\", ...","title":"Sprites"},{"location":"sprites/#sprites","text":"The Sprites folder holds sprites in PNG format. These are used in multiple places, usually in Sprite fields. When you're referencing a sprite, you must include the extension regardless: ... \"Sprite\": \"mysprite.png\", ...","title":"Sprites"},{"location":"testing/","text":"Testing your mod Testing your creations is essential to the process of modding. This page gives you hints on how to be more efficient with the process. Log output The modding.log file in your save directory logs errors related to modding - these are mostly related to malformatted data in the json files. If the game or your mod doesn't work properly, you should check this file for troubleshooting. It pinpoints the problematic files. Cheat console By creating a file named ilovepip.txt in your save directory, you'll be able to access the console ingame by pressing the ` (tilde) key, from which you can enter numerous commands to speed up testing content. The following commands exist. {} denote required parameters, [] denote optional ones. addres {metal | xp | candy | fuel} {amount} Adds an amount of a resource. setres {metal | xp | candy | fuel | energy} {amount} Sets a resource's amount. sethangarspace {amount} Sets the base amount of ships that you can deploy to fights. maxenergy Forces energy to stay at the 'optimal' amount. Enter again to toggle off. idle {minutes} Gives you {minutes} worth of resource production. unlockbuildings Unlocks all buildings for construction. unlockships Unlocks all ships, including modded ones. skipfleetcd Removes the current cooldown for deploying a new fleet. strast [id] Next asteroid to spawn will be strange. If a strast id is provided, it will be of that type (even if not unlocked). peace Toggles invincibility for all ships (including enemies) - useful to testing abilities without worrying about finding a fight that doesn't end in 2 seconds. pipmode The holy grail cheat: Allows you to buy most things without needing the resources Unlocks the Galaxy map, combat abilities and Ascension Calls the maxenergy , unlockbuildings and unlockships commands Unlocks all lore logs Changes the (default boost)[campaigns.md#default-boost] to the testing one (TODO elaborate)","title":"Testing"},{"location":"testing/#testing-your-mod","text":"Testing your creations is essential to the process of modding. This page gives you hints on how to be more efficient with the process.","title":"Testing your mod"},{"location":"testing/#log-output","text":"The modding.log file in your save directory logs errors related to modding - these are mostly related to malformatted data in the json files. If the game or your mod doesn't work properly, you should check this file for troubleshooting. It pinpoints the problematic files.","title":"Log output"},{"location":"testing/#cheat-console","text":"By creating a file named ilovepip.txt in your save directory, you'll be able to access the console ingame by pressing the ` (tilde) key, from which you can enter numerous commands to speed up testing content. The following commands exist. {} denote required parameters, [] denote optional ones. addres {metal | xp | candy | fuel} {amount} Adds an amount of a resource. setres {metal | xp | candy | fuel | energy} {amount} Sets a resource's amount. sethangarspace {amount} Sets the base amount of ships that you can deploy to fights. maxenergy Forces energy to stay at the 'optimal' amount. Enter again to toggle off. idle {minutes} Gives you {minutes} worth of resource production. unlockbuildings Unlocks all buildings for construction. unlockships Unlocks all ships, including modded ones. skipfleetcd Removes the current cooldown for deploying a new fleet. strast [id] Next asteroid to spawn will be strange. If a strast id is provided, it will be of that type (even if not unlocked). peace Toggles invincibility for all ships (including enemies) - useful to testing abilities without worrying about finding a fight that doesn't end in 2 seconds. pipmode The holy grail cheat: Allows you to buy most things without needing the resources Unlocks the Galaxy map, combat abilities and Ascension Calls the maxenergy , unlockbuildings and unlockships commands Unlocks all lore logs Changes the (default boost)[campaigns.md#default-boost] to the testing one (TODO elaborate)","title":"Cheat console"},{"location":"upgrades/","text":"Upgrades Upgrades are defined in the Upgrades folder. An upgrade only defines the name, price, tiering and other metadata; the actual effects that it grants to the player are defined through a boost . Example This example is a tier 2 upgrade that costs 5k metal and 200 Experience. { \"referenceName\":\"Panel upgrade 2\", \"mutualExclusivityGroup\": \"\", \"boostId\": \"test_upgrade_boost\", \"stringId\":\"test_upgrade\", \"name\": \"upgrade.test_upgrade_1\", \"isAscensionUpgrade\": false, \"important\": true, \"sprite\": \"test_sprite.png\", \"tier\": 2, \"costs\": { \"metal\": 5000, \"experience\": 200, }, } Properties Like with all modded content, the stringId field is mandatory. Additionally, for them to do anything for the player, you must include a boostId property, with the ID of the boost to grant. The resource cost of the upgrade is defined through the costs property, with a special structure: \"costs\": { \"metal\": 5000, \"experience\": 200 }, The following are the IDs of the resources to use for costs : - \"metal\" - \"experience\" - \"candy\" (only works for Ascension upgrades) - \"energy\" (not deducted; if used, the upgrade will be unpurchasable unless you have excess energy equal or greater than the 'cost') - \"fuel\" Other properties: - name : string, the text key to use for the name of the upgrade. The description and flavour text use this same key suffixed with .desc and .flavour respectively. Note that by default, the description of an upgrade is automatically generated from its boost. If you provide your own description, it will be used instead. You can use this to reword boosts with ugly/verbose descriptions. - displayIndex : number, higher amounts cause the upgrade to be displayed further on the end of each tier in the upgrades menu. - tier : number, the upgrade's tier, as shown in the upgrades menu. Upgrades with a negative tier are hidden from the upgrades menu, but still obtainable through other means (such as conquest). - important : boolean, if true, the upgrade will flash red in the upgrades menu, and always have a <!> over it, and will show that same badge over the upgrades menu button on the sidebar until it is bought. It will also go into a special tier in the upgrades menu. - guildRestriction : number, restricts this upgrade to players of a specific guild. Values: - -1 : default, no guild restriction. - 0 : Scavenger guild - 1 : Scientist guild - 2 : Trader guild - mutualExclusivityGroup : string. Upgrades with the same mutualExclusivityGroup cannot be bought together. Once one is bought, the others become hidden from the upgrades menu (but may still be obtained through other means). - sprite : string, the sprite filename.","title":"Upgrades"},{"location":"upgrades/#upgrades","text":"Upgrades are defined in the Upgrades folder. An upgrade only defines the name, price, tiering and other metadata; the actual effects that it grants to the player are defined through a boost .","title":"Upgrades"},{"location":"upgrades/#example","text":"This example is a tier 2 upgrade that costs 5k metal and 200 Experience. { \"referenceName\":\"Panel upgrade 2\", \"mutualExclusivityGroup\": \"\", \"boostId\": \"test_upgrade_boost\", \"stringId\":\"test_upgrade\", \"name\": \"upgrade.test_upgrade_1\", \"isAscensionUpgrade\": false, \"important\": true, \"sprite\": \"test_sprite.png\", \"tier\": 2, \"costs\": { \"metal\": 5000, \"experience\": 200, }, }","title":"Example"},{"location":"upgrades/#properties","text":"Like with all modded content, the stringId field is mandatory. Additionally, for them to do anything for the player, you must include a boostId property, with the ID of the boost to grant. The resource cost of the upgrade is defined through the costs property, with a special structure: \"costs\": { \"metal\": 5000, \"experience\": 200 }, The following are the IDs of the resources to use for costs : - \"metal\" - \"experience\" - \"candy\" (only works for Ascension upgrades) - \"energy\" (not deducted; if used, the upgrade will be unpurchasable unless you have excess energy equal or greater than the 'cost') - \"fuel\" Other properties: - name : string, the text key to use for the name of the upgrade. The description and flavour text use this same key suffixed with .desc and .flavour respectively. Note that by default, the description of an upgrade is automatically generated from its boost. If you provide your own description, it will be used instead. You can use this to reword boosts with ugly/verbose descriptions. - displayIndex : number, higher amounts cause the upgrade to be displayed further on the end of each tier in the upgrades menu. - tier : number, the upgrade's tier, as shown in the upgrades menu. Upgrades with a negative tier are hidden from the upgrades menu, but still obtainable through other means (such as conquest). - important : boolean, if true, the upgrade will flash red in the upgrades menu, and always have a <!> over it, and will show that same badge over the upgrades menu button on the sidebar until it is bought. It will also go into a special tier in the upgrades menu. - guildRestriction : number, restricts this upgrade to players of a specific guild. Values: - -1 : default, no guild restriction. - 0 : Scavenger guild - 1 : Scientist guild - 2 : Trader guild - mutualExclusivityGroup : string. Upgrades with the same mutualExclusivityGroup cannot be bought together. Once one is bought, the others become hidden from the upgrades menu (but may still be obtained through other means). - sprite : string, the sprite filename.","title":"Properties"}]}